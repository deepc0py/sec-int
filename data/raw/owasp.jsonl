{"source": "owasp", "id": "A01:2021", "title": "Broken Access Control", "description": "OWASP Top 10:2021OWASP/Top10HomeNoticeIntroductionHow to use the OWASP Top 10 as a standardHow to start an AppSec program with the OWASP Top 10About OWASPTop 10:2021 ListTop 10:2021 ListA01 Broken Access ControlA01 Broken Access ControlTable of contentsFactorsOverviewDescriptionHow to PreventExample Attack ScenariosReferencesList of Mapped CWEsA02 Cryptographic FailuresA03 InjectionA04 Insecure DesignA05 Security MisconfigurationA06 Vulnerable and Outdated ComponentsA07 Identification and Authentication FailuresA08 Software and Data Integrity FailuresA09 Security Logging and Monitoring FailuresA10 Server Side Request Forgery (SSRF)Next StepsTable of contentsFactorsOverviewDescriptionHow to PreventExample Attack ScenariosReferencesList of Mapped CWEsA01:2021 – Broken Access ControlFactorsCWEs MappedMax Incidence RateAvg Incidence RateAvg Weighted ExploitAvg Weighted ImpactMax CoverageAvg CoverageTotal OccurrencesTotal CVEs3455.97%3.81%6.925.9394.55%47.72%318,48719,013OverviewMoving up from the fifth position, 94% of applications were tested for\nsome form of broken access control with the average incidence rate of 3.81%, and has the most occurrences in the contributed dataset with over 318k. Notable Common Weakness Enumerations (CWEs) included areCWE-200: Exposure of Sensitive Information to an Unauthorized Actor,CWE-201:\nInsertion of Sensitive Information Into Sent Data, andCWE-352:\nCross-Site Request Forgery.DescriptionAccess control enforces policy such that users cannot act outside of\ntheir intended permissions. Failures typically lead to unauthorized\ninformation disclosure, modification, or destruction of all data or\nperforming a business function outside the user's limits. Common access\ncontrol vulnerabilities include:Violation of the principle of least privilege or deny by default,\n where access should only be granted for particular capabilities,\n roles, or users, but is available to anyone.Bypassing access control checks by modifying the URL (parameter\n tampering or force browsing), internal application state, or the\n HTML page, or by using an attack tool modifying API requests.Permitting viewing or editing someone else's account, by providing\n its unique identifier (insecure direct object references)Accessing API with missing access controls for POST, PUT and DELETE.Elevation of privilege. Acting as a user without being logged in or\n acting as an admin when logged in as a user.Metadata manipulation, such as replaying or tampering with a JSON\n Web Token (JWT) access control token, or a cookie or hidden field\n manipulated to elevate privileges or abusing JWT invalidation.CORS misconfiguration allows API access from unauthorized/untrusted\n origins.Force browsing to authenticated pages as an unauthenticated user or\n to privileged pages as a standard user.How to PreventAccess control is only effective in trusted server-side code or\nserver-less API, where the attacker cannot modify the access control\ncheck or metadata.Except for public resources, deny by default.Implement access control mechanisms once and re-use them throughout\n the application, including minimizing Cross-Origin Resource Sharing (CORS) usage.Model access controls should enforce record ownership rather than\n accepting that the user can create, read, update, or delete any\n record.Unique application business limit requirements should be enforced by\n domain models.Disable web server directory listing and ensure file metadata (e.g.,\n .git) and backup files are not present within web roots.Log access control failures, alert admins when appropriate (e.g.,\n repeated failures).Rate limit API and controller access to minimize the harm from\n automated attack tooling.Stateful session identifiers should be invalidated on the server after logout.\n Stateless JWT tokens should rather be short-lived so that the window of \n opportunity for an attacker is minimized. For longer lived JWTs it's highly recommended to\n follow the OAuth standards to revoke access.Developers and QA staff should include functional access control unit\nand integration tests.Example Attack ScenariosScenario #1:The application uses unverified data in a SQL call that\nis accessing account information:pstmt.setString(1, request.getParameter(\"acct\"));\n ResultSet results = pstmt.executeQuery( );An attacker simply modifies the browser's 'acct' parameter to send\nwhatever account number they want. If not correctly verified, the\nattacker can access any user's account.https://example.com/app/accountInfo?acct=notmyacctScenario #2:An attacker simply force browses to target URLs. Admin\nrights are required for access to the admin page.https://example.com/app/getappInfo\n https://example.com/app/admin_getappInfoIf an unauthenticated user can access either page, it's a flaw. If a\nnon-admin can access the admin page, this is a flaw.ReferencesOWASP Proactive Controls: Enforce Access\n ControlsOWASP Application Security Verification Standard: V4 Access\n ControlOWASP Testing Guide: Authorization\n TestingOWASP Cheat Sheet: AuthorizationPortSwigger: Exploiting CORS\n misconfigurationOAuth: Revoking AccessList of Mapped CWEsCWE-22 Improper Limitation of a Pathname to a Restricted Directory\n('Path Traversal')CWE-23 Relative Path TraversalCWE-35 Path Traversal: '.../...//'CWE-59 Improper Link Resolution Before File Access ('Link Following')CWE-200 Exposure of Sensitive Information to an Unauthorized ActorCWE-201 Exposure of Sensitive Information Through Sent DataCWE-219 Storage of File with Sensitive Data Under Web RootCWE-264 Permissions, Privileges, and Access Controls (should no longer be used)CWE-275 Permission IssuesCWE-276 Incorrect Default PermissionsCWE-284 Improper Access ControlCWE-285 Improper AuthorizationCWE-352 Cross-Site Request Forgery (CSRF)CWE-359 Exposure of Private Personal Information to an Unauthorized ActorCWE-377 Insecure Temporary FileCWE-402 Transmission of Private Resources into a New Sphere ('Resource Leak')CWE-425 Direct Request ('Forced Browsing')CWE-441 Unintended Proxy or Intermediary ('Confused Deputy')CWE-497 Exposure of Sensitive System Information to an Unauthorized Control SphereCWE-538 Insertion of Sensitive Information into Externally-Accessible File or DirectoryCWE-540 Inclusion of Sensitive Information in Source CodeCWE-548 Exposure of Information Through Directory ListingCWE-552 Files or Directories Accessible to External PartiesCWE-566 Authorization Bypass Through User-Controlled SQL Primary KeyCWE-601 URL Redirection to Untrusted Site ('Open Redirect')CWE-639 Authorization Bypass Through User-Controlled KeyCWE-651 Exposure of WSDL File Containing Sensitive InformationCWE-668 Exposure of Resource to Wrong SphereCWE-706 Use of Incorrectly-Resolved Name or ReferenceCWE-862 Missing AuthorizationCWE-863 Incorrect AuthorizationCWE-913 Improper Control of Dynamically-Managed Code ResourcesCWE-922 Insecure Storage of Sensitive InformationCWE-1275 Sensitive Cookie with Improper SameSite Attribute\n\nOWASP Top 10:2021OWASP/Top10HomeNoticeIntroductionHow to use the OWASP Top 10 as a standardHow to start an AppSec program with the OWASP Top 10About OWASPTop 10:2021 ListTop 10:2021 ListA01 Broken Access ControlA01 Broken Access ControlTable of contentsFactorsOverviewDescriptionHow to PreventExample Attack ScenariosReferencesList of Mapped CWEsA02 Cryptographic FailuresA03 InjectionA04 Insecure DesignA05 Security MisconfigurationA06 Vulnerable and Outdated ComponentsA07 Identification and Authentication FailuresA08 Software and Data Integrity FailuresA09 Security Logging and Monitoring FailuresA10 Server Side Request Forgery (SSRF)Next Steps\n\nTable of contentsFactorsOverviewDescriptionHow to PreventExample Attack ScenariosReferencesList of Mapped CWEs\n\nA01:2021 – Broken Access ControlFactorsCWEs MappedMax Incidence RateAvg Incidence RateAvg Weighted ExploitAvg Weighted ImpactMax CoverageAvg CoverageTotal OccurrencesTotal CVEs3455.97%3.81%6.925.9394.55%47.72%318,48719,013OverviewMoving up from the fifth position, 94% of applications were tested for\nsome form of broken access control with the average incidence rate of 3.81%, and has the most occurrences in the contributed dataset with over 318k. Notable Common Weakness Enumerations (CWEs) included areCWE-200: Exposure of Sensitive Information to an Unauthorized Actor,CWE-201:\nInsertion of Sensitive Information Into Sent Data, andCWE-352:\nCross-Site Request Forgery.DescriptionAccess control enforces policy such that users cannot act outside of\ntheir intended permissions. Failures typically lead to unauthorized\ninformation disclosure, modification, or destruction of all data or\nperforming a business function outside the user's limits. Common access\ncontrol vulnerabilities include:Violation of the principle of least privilege or deny by default,\n where access should only be granted for particular capabilities,\n roles, or users, but is available to anyone.Bypassing access control checks by modifying the URL (parameter\n tampering or force browsing), internal application state, or the\n HTML page, or by using an attack tool modifying API requests.Permitting viewing or editing someone else's account, by providing\n its unique identifier (insecure direct object references)Accessing API with missing access controls for POST, PUT and DELETE.Elevation of privilege. Acting as a user without being logged in or\n acting as an admin when logged in as a user.Metadata manipulation, such as replaying or tampering with a JSON\n Web Token (JWT) access control token, or a cookie or hidden field\n manipulated to elevate privileges or abusing JWT invalidation.CORS misconfiguration allows API access from unauthorized/untrusted\n origins.Force browsing to authenticated pages as an unauthenticated user or\n to privileged pages as a standard user.How to PreventAccess control is only effective in trusted server-side code or\nserver-less API, where the attacker cannot modify the access control\ncheck or metadata.Except for public resources, deny by default.Implement access control mechanisms once and re-use them throughout\n the application, including minimizing Cross-Origin Resource Sharing (CORS) usage.Model access controls should enforce record ownership rather than\n accepting that the user can create, read, update, or delete any\n record.Unique application business limit requirements should be enforced by\n domain models.Disable web server directory listing and ensure file metadata (e.g.,\n .git) and backup files are not present within web roots.Log access control failures, alert admins when appropriate (e.g.,\n repeated failures).Rate limit API and controller access to minimize the harm from\n automated attack tooling.Stateful session identifiers should be invalidated on the server after logout.\n Stateless JWT tokens should rather be short-lived so that the window of \n opportunity for an attacker is minimized. For longer lived JWTs it's highly recommended to\n follow the OAuth standards to revoke access.Developers and QA staff should include functional access control unit\nand integration tests.Example Attack ScenariosScenario #1:The application uses unverified data in a SQL call that\nis accessing account information:pstmt.setString(1, request.getParameter(\"acct\"));\n ResultSet results = pstmt.executeQuery( );An attacker simply modifies the browser's 'acct' parameter to send\nwhatever account number they want. If not correctly verified, the\nattacker can access any user's account.https://example.com/app/accountInfo?acct=notmyacctScenario #2:An attacker simply force browses to target URLs. Admin\nrights are required for access to the admin page.https://example.com/app/getappInfo\n https://example.com/app/admin_getappInfoIf an unauthenticated user can access either page, it's a flaw. If a\nnon-admin can access the admin page, this is a flaw.ReferencesOWASP Proactive Controls: Enforce Access\n ControlsOWASP Application Security Verification Standard: V4 Access\n ControlOWASP Testing Guide: Authorization\n TestingOWASP Cheat Sheet: AuthorizationPortSwigger: Exploiting CORS\n misconfigurationOAuth: Revoking AccessList of Mapped CWEsCWE-22 Improper Limitation of a Pathname to a Restricted Directory\n('Path Traversal')CWE-23 Relative Path TraversalCWE-35 Path Traversal: '.../...//'CWE-59 Improper Link Resolution Before File Access ('Link Following')CWE-200 Exposure of Sensitive Information to an Unauthorized ActorCWE-201 Exposure of Sensitive Information Through Sent DataCWE-219 Storage of File with Sensitive Data Under Web RootCWE-264 Permissions, Privileges, and Access Controls (should no longer be used)CWE-275 Permission IssuesCWE-276 Incorrect Default PermissionsCWE-284 Improper Access ControlCWE-285 Improper AuthorizationCWE-352 Cross-Site Request Forgery (CSRF)CWE-359 Exposure of Private Personal Information to an Unauthorized ActorCWE-377 Insecure Temporary FileCWE-402 Transmission of Private Resources into a New Sphere ('Resource Leak')CWE-425 Direct Request ('Forced Browsing')CWE-441 Unintended Proxy or Intermediary ('Confused Deputy')CWE-497 Exposure of Sensitive System Information to an Unauthorized Control SphereCWE-538 Insertion of Sensitive Information into Externally-Accessible File or DirectoryCWE-540 Inclusion of Sensitive Information in Source CodeCWE-548 Exposure of Information Through Directory ListingCWE-552 Files or Directories Accessible to External PartiesCWE-566 Authorization Bypass Through User-Controlled SQL Primary KeyCWE-601 URL Redirection to Untrusted Site ('Open Redirect')CWE-639 Authorization Bypass Through User-Controlled KeyCWE-651 Exposure of WSDL File Containing Sensitive InformationCWE-668 Exposure of Resource to Wrong SphereCWE-706 Use of Incorrectly-Resolved Name or ReferenceCWE-862 Missing AuthorizationCWE-863 Incorrect AuthorizationCWE-913 Improper Control of Dynamically-Managed Code ResourcesCWE-922 Insecure Storage of Sensitive InformationCWE-1275 Sensitive Cookie with Improper SameSite Attribute\n\nMoving up from the fifth position, 94% of applications were tested for\nsome form of broken access control with the average incidence rate of 3.81%, and has the most occurrences in the contributed dataset with over 318k. Notable Common Weakness Enumerations (CWEs) included areCWE-200: Exposure of Sensitive Information to an Unauthorized Actor,CWE-201:\nInsertion of Sensitive Information Into Sent Data, andCWE-352:\nCross-Site Request Forgery.\n\nAccess control enforces policy such that users cannot act outside of\ntheir intended permissions. Failures typically lead to unauthorized\ninformation disclosure, modification, or destruction of all data or\nperforming a business function outside the user's limits. Common access\ncontrol vulnerabilities include:\n\nViolation of the principle of least privilege or deny by default,\n where access should only be granted for particular capabilities,\n roles, or users, but is available to anyone.\n\nBypassing access control checks by modifying the URL (parameter\n tampering or force browsing), internal application state, or the\n HTML page, or by using an attack tool modifying API requests.\n\nPermitting viewing or editing someone else's account, by providing\n its unique identifier (insecure direct object references)\n\nAccessing API with missing access controls for POST, PUT and DELETE.\n\nElevation of privilege. Acting as a user without being logged in or\n acting as an admin when logged in as a user.\n\nMetadata manipulation, such as replaying or tampering with a JSON\n Web Token (JWT) access control token, or a cookie or hidden field\n manipulated to elevate privileges or abusing JWT invalidation.\n\nCORS misconfiguration allows API access from unauthorized/untrusted\n origins.\n\nForce browsing to authenticated pages as an unauthenticated user or\n to privileged pages as a standard user.\n\nAccess control is only effective in trusted server-side code or\nserver-less API, where the attacker cannot modify the access control\ncheck or metadata.\n\nExcept for public resources, deny by default.\n\nImplement access control mechanisms once and re-use them throughout\n the application, including minimizing Cross-Origin Resource Sharing (CORS) usage.\n\nModel access controls should enforce record ownership rather than\n accepting that the user can create, read, update, or delete any\n record.\n\nUnique application business limit requirements should be enforced by\n domain models.\n\nDisable web server directory listing and ensure file metadata (e.g.,\n .git) and backup files are not present within web roots.\n\nLog access control failures, alert admins when appropriate (e.g.,\n repeated failures).\n\nRate limit API and controller access to minimize the harm from\n automated attack tooling.\n\nStateful session identifiers should be invalidated on the server after logout.\n Stateless JWT tokens should rather be short-lived so that the window of \n opportunity for an attacker is minimized. For longer lived JWTs it's highly recommended to\n follow the OAuth standards to revoke access.\n\nDevelopers and QA staff should include functional access control unit\nand integration tests.\n\nScenario #1:The application uses unverified data in a SQL call that\nis accessing account information:\n\nAn attacker simply modifies the browser's 'acct' parameter to send\nwhatever account number they want. If not correctly verified, the\nattacker can access any user's account.\n\nScenario #2:An attacker simply force browses to target URLs. Admin\nrights are required for access to the admin page.\n\nIf an unauthenticated user can access either page, it's a flaw. If a\nnon-admin can access the admin page, this is a flaw.\n\nOWASP Proactive Controls: Enforce Access\n Controls\n\nOWASP Application Security Verification Standard: V4 Access\n Control\n\nOWASP Testing Guide: Authorization\n Testing\n\nOWASP Cheat Sheet: Authorization\n\nPortSwigger: Exploiting CORS\n misconfiguration\n\nOAuth: Revoking Access\n\nCWE-22 Improper Limitation of a Pathname to a Restricted Directory\n('Path Traversal')\n\nCWE-23 Relative Path Traversal\n\nCWE-35 Path Traversal: '.../...//'\n\nCWE-59 Improper Link Resolution Before File Access ('Link Following')\n\nCWE-200 Exposure of Sensitive Information to an Unauthorized Actor\n\nCWE-201 Exposure of Sensitive Information Through Sent Data\n\nCWE-219 Storage of File with Sensitive Data Under Web Root\n\nCWE-264 Permissions, Privileges, and Access Controls (should no longer be used)\n\nCWE-275 Permission Issues\n\nCWE-276 Incorrect Default Permissions\n\nCWE-284 Improper Access Control\n\nCWE-285 Improper Authorization\n\nCWE-352 Cross-Site Request Forgery (CSRF)\n\nCWE-359 Exposure of Private Personal Information to an Unauthorized Actor\n\nCWE-377 Insecure Temporary File\n\nCWE-402 Transmission of Private Resources into a New Sphere ('Resource Leak')\n\nCWE-425 Direct Request ('Forced Browsing')\n\nCWE-441 Unintended Proxy or Intermediary ('Confused Deputy')\n\nCWE-497 Exposure of Sensitive System Information to an Unauthorized Control Sphere\n\nCWE-538 Insertion of Sensitive Information into Externally-Accessible File or Directory\n\nCWE-540 Inclusion of Sensitive Information in Source Code\n\nCWE-548 Exposure of Information Through Directory Listing\n\nCWE-552 Files or Directories Accessible to External Parties\n\nCWE-566 Authorization Bypass Through User-Controlled SQL Primary Key\n\nCWE-601 URL Redirection to Untrusted Site ('Open Redirect')\n\nCWE-639 Authorization Bypass Through User-Controlled Key\n\nCWE-651 Exposure of WSDL File Containing Sensitive Information\n\nCWE-668 Exposure of Resource to Wrong Sphere\n\nCWE-706 Use of Incorrectly-Resolved Name or Reference\n\nCWE-862 Missing Authorization\n\nCWE-863 Incorrect Authorization\n\nCWE-913 Improper Control of Dynamically-Managed Code Resources\n\nCWE-922 Insecure Storage of Sensitive Information\n\nCWE-1275 Sensitive Cookie with Improper SameSite Attribute", "url": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/"}
{"source": "owasp", "id": "A02:2021", "title": "Cryptographic Failures", "description": "OWASP Top 10:2021OWASP/Top10HomeNoticeIntroductionHow to use the OWASP Top 10 as a standardHow to start an AppSec program with the OWASP Top 10About OWASPTop 10:2021 ListTop 10:2021 ListA01 Broken Access ControlA02 Cryptographic FailuresA02 Cryptographic FailuresTable of contentsFactorsOverviewDescriptionHow to PreventExample Attack ScenariosReferencesList of Mapped CWEsA03 InjectionA04 Insecure DesignA05 Security MisconfigurationA06 Vulnerable and Outdated ComponentsA07 Identification and Authentication FailuresA08 Software and Data Integrity FailuresA09 Security Logging and Monitoring FailuresA10 Server Side Request Forgery (SSRF)Next StepsTable of contentsFactorsOverviewDescriptionHow to PreventExample Attack ScenariosReferencesList of Mapped CWEsA02:2021 – Cryptographic FailuresFactorsCWEs MappedMax Incidence RateAvg Incidence RateAvg Weighted ExploitAvg Weighted ImpactMax CoverageAvg CoverageTotal OccurrencesTotal CVEs2946.44%4.49%7.296.8179.33%34.85%233,7883,075OverviewShifting up one position to #2, previously known asSensitive Data\nExposure, which is more of a broad symptom rather than a root cause,\nthe focus is on failures related to cryptography (or lack thereof).\nWhich often lead to exposure of sensitive data. Notable Common Weakness Enumerations (CWEs) included\nareCWE-259: Use of Hard-coded Password,CWE-327: Broken or Risky\nCrypto Algorithm, andCWE-331 Insufficient Entropy.DescriptionThe first thing is to determine the protection needs of data in transit\nand at rest. For example, passwords, credit card numbers, health\nrecords, personal information, and business secrets require extra\nprotection, mainly if that data falls under privacy laws, e.g., EU's\nGeneral Data Protection Regulation (GDPR), or regulations, e.g.,\nfinancial data protection such as PCI Data Security Standard (PCI DSS).\nFor all such data:Is any data transmitted in clear text? This concerns protocols such\n as HTTP, SMTP, FTP also using TLS upgrades like STARTTLS. External \n internet traffic is hazardous. Verify all internal traffic, e.g., \n between load balancers, web servers, or back-end systems.Are any old or weak cryptographic algorithms or protocols used either \n by default or in older code?Are default crypto keys in use, weak crypto keys generated or\n re-used, or is proper key management or rotation missing?\n Are crypto keys checked into source code repositories?Is encryption not enforced, e.g., are any HTTP headers (browser)\n security directives or headers missing?Is the received server certificate and the trust chain properly validated?Are initialization vectors ignored, reused, or not generated\n sufficiently secure for the cryptographic mode of operation?\n Is an insecure mode of operation such as ECB in use? Is encryption\n used when authenticated encryption is more appropriate?Are passwords being used as cryptographic keys in absence of a\n password base key derivation function?Is randomness used for cryptographic purposes that was not designed\n to meet cryptographic requirements? Even if the correct function is\n chosen, does it need to be seeded by the developer, and if not, has\n the developer over-written the strong seeding functionality built into\n it with a seed that lacks sufficient entropy/unpredictability?Are deprecated hash functions such as MD5 or SHA1 in use, or are\n non-cryptographic hash functions used when cryptographic hash functions\n are needed?Are deprecated cryptographic padding methods such as PKCS number 1 v1.5\n in use?Are cryptographic error messages or side channel information\n exploitable, for example in the form of padding oracle attacks?See ASVS Crypto (V7), Data Protection (V9), and SSL/TLS (V10)How to PreventDo the following, at a minimum, and consult the references:Classify data processed, stored, or transmitted by an application.\n Identify which data is sensitive according to privacy laws,\n regulatory requirements, or business needs.Don't store sensitive data unnecessarily. Discard it as soon as\n possible or use PCI DSS compliant tokenization or even truncation.\n Data that is not retained cannot be stolen.Make sure to encrypt all sensitive data at rest.Ensure up-to-date and strong standard algorithms, protocols, and\n keys are in place; use proper key management.Encrypt all data in transit with secure protocols such as TLS with\n forward secrecy (FS) ciphers, cipher prioritization by the\n server, and secure parameters. Enforce encryption using directives\n like HTTP Strict Transport Security (HSTS).Disable caching for response that contain sensitive data.Apply required security controls as per the data classification.Do not use legacy protocols such as FTP and SMTP for transporting\n sensitive data.Store passwords using strong adaptive and salted hashing functions\n with a work factor (delay factor), such as Argon2, scrypt, bcrypt or\n PBKDF2.Initialization vectors must be chosen appropriate for the mode of\n operation. For many modes, this means using a CSPRNG (cryptographically\n secure pseudo random number generator). For modes that require a\n nonce, then the initialization vector (IV) does not need a CSPRNG. In all cases, the IV\n should never be used twice for a fixed key.Always use authenticated encryption instead of just encryption.Keys should be generated cryptographically randomly and stored in\n memory as byte arrays. If a password is used, then it must be converted\n to a key via an appropriate password base key derivation function.Ensure that cryptographic randomness is used where appropriate, and\n that it has not been seeded in a predictable way or with low entropy.\n Most modern APIs do not require the developer to seed the CSPRNG to\n get security.Avoid deprecated cryptographic functions and padding schemes, such as\n MD5, SHA1, PKCS number 1 v1.5.Verify independently the effectiveness of configuration and\n settings.Example Attack ScenariosScenario #1: An application encrypts credit card numbers in a\ndatabase using automatic database encryption. However, this data is\nautomatically decrypted when retrieved, allowing a SQL injection flaw to\nretrieve credit card numbers in clear text.Scenario #2: A site doesn't use or enforce TLS for all pages or\nsupports weak encryption. An attacker monitors network traffic (e.g., at\nan insecure wireless network), downgrades connections from HTTPS to\nHTTP, intercepts requests, and steals the user's session cookie. The\nattacker then replays this cookie and hijacks the user's (authenticated)\nsession, accessing or modifying the user's private data. Instead of the\nabove they could alter all transported data, e.g., the recipient of a\nmoney transfer.Scenario #3: The password database uses unsalted or simple hashes to\nstore everyone's passwords. A file upload flaw allows an attacker to\nretrieve the password database. All the unsalted hashes can be exposed\nwith a rainbow table of pre-calculated hashes. Hashes generated by\nsimple or fast hash functions may be cracked by GPUs, even if they were\nsalted.ReferencesOWASP Proactive Controls: Protect Data EverywhereOWASP Application Security Verification Standard (V7, 9, 10)OWASP Cheat Sheet: Transport Layer ProtectionOWASP Cheat Sheet: User Privacy ProtectionOWASP Cheat Sheet: Password StorageOWASP Cheat Sheet: Cryptographic StorageOWASP Cheat Sheet: HSTSOWASP Testing Guide: Testing for weak cryptographyList of Mapped CWEsCWE-259 Use of Hard-coded PasswordCWE-261 Weak Encoding for PasswordCWE-296 Improper Following of a Certificate's Chain of TrustCWE-310 Cryptographic IssuesCWE-319 Cleartext Transmission of Sensitive InformationCWE-321 Use of Hard-coded Cryptographic KeyCWE-322 Key Exchange without Entity AuthenticationCWE-323 Reusing a Nonce, Key Pair in EncryptionCWE-324 Use of a Key Past its Expiration DateCWE-325 Missing Required Cryptographic StepCWE-326 Inadequate Encryption StrengthCWE-327 Use of a Broken or Risky Cryptographic AlgorithmCWE-328 Reversible One-Way HashCWE-329 Not Using a Random IV with CBC ModeCWE-330 Use of Insufficiently Random ValuesCWE-331 Insufficient EntropyCWE-335 Incorrect Usage of Seeds in Pseudo-Random Number Generator(PRNG)CWE-336 Same Seed in Pseudo-Random Number Generator (PRNG)CWE-337 Predictable Seed in Pseudo-Random Number Generator (PRNG)CWE-338 Use of Cryptographically Weak Pseudo-Random Number Generator(PRNG)CWE-340 Generation of Predictable Numbers or IdentifiersCWE-347 Improper Verification of Cryptographic SignatureCWE-523 Unprotected Transport of CredentialsCWE-720 OWASP Top Ten 2007 Category A9 - Insecure CommunicationsCWE-757 Selection of Less-Secure Algorithm During Negotiation('Algorithm Downgrade')CWE-759 Use of a One-Way Hash without a SaltCWE-760 Use of a One-Way Hash with a Predictable SaltCWE-780 Use of RSA Algorithm without OAEPCWE-818 Insufficient Transport Layer ProtectionCWE-916 Use of Password Hash With Insufficient Computational Effort\n\nOWASP Top 10:2021OWASP/Top10HomeNoticeIntroductionHow to use the OWASP Top 10 as a standardHow to start an AppSec program with the OWASP Top 10About OWASPTop 10:2021 ListTop 10:2021 ListA01 Broken Access ControlA02 Cryptographic FailuresA02 Cryptographic FailuresTable of contentsFactorsOverviewDescriptionHow to PreventExample Attack ScenariosReferencesList of Mapped CWEsA03 InjectionA04 Insecure DesignA05 Security MisconfigurationA06 Vulnerable and Outdated ComponentsA07 Identification and Authentication FailuresA08 Software and Data Integrity FailuresA09 Security Logging and Monitoring FailuresA10 Server Side Request Forgery (SSRF)Next Steps\n\nTable of contentsFactorsOverviewDescriptionHow to PreventExample Attack ScenariosReferencesList of Mapped CWEs\n\nA02:2021 – Cryptographic FailuresFactorsCWEs MappedMax Incidence RateAvg Incidence RateAvg Weighted ExploitAvg Weighted ImpactMax CoverageAvg CoverageTotal OccurrencesTotal CVEs2946.44%4.49%7.296.8179.33%34.85%233,7883,075OverviewShifting up one position to #2, previously known asSensitive Data\nExposure, which is more of a broad symptom rather than a root cause,\nthe focus is on failures related to cryptography (or lack thereof).\nWhich often lead to exposure of sensitive data. Notable Common Weakness Enumerations (CWEs) included\nareCWE-259: Use of Hard-coded Password,CWE-327: Broken or Risky\nCrypto Algorithm, andCWE-331 Insufficient Entropy.DescriptionThe first thing is to determine the protection needs of data in transit\nand at rest. For example, passwords, credit card numbers, health\nrecords, personal information, and business secrets require extra\nprotection, mainly if that data falls under privacy laws, e.g., EU's\nGeneral Data Protection Regulation (GDPR), or regulations, e.g.,\nfinancial data protection such as PCI Data Security Standard (PCI DSS).\nFor all such data:Is any data transmitted in clear text? This concerns protocols such\n as HTTP, SMTP, FTP also using TLS upgrades like STARTTLS. External \n internet traffic is hazardous. Verify all internal traffic, e.g., \n between load balancers, web servers, or back-end systems.Are any old or weak cryptographic algorithms or protocols used either \n by default or in older code?Are default crypto keys in use, weak crypto keys generated or\n re-used, or is proper key management or rotation missing?\n Are crypto keys checked into source code repositories?Is encryption not enforced, e.g., are any HTTP headers (browser)\n security directives or headers missing?Is the received server certificate and the trust chain properly validated?Are initialization vectors ignored, reused, or not generated\n sufficiently secure for the cryptographic mode of operation?\n Is an insecure mode of operation such as ECB in use? Is encryption\n used when authenticated encryption is more appropriate?Are passwords being used as cryptographic keys in absence of a\n password base key derivation function?Is randomness used for cryptographic purposes that was not designed\n to meet cryptographic requirements? Even if the correct function is\n chosen, does it need to be seeded by the developer, and if not, has\n the developer over-written the strong seeding functionality built into\n it with a seed that lacks sufficient entropy/unpredictability?Are deprecated hash functions such as MD5 or SHA1 in use, or are\n non-cryptographic hash functions used when cryptographic hash functions\n are needed?Are deprecated cryptographic padding methods such as PKCS number 1 v1.5\n in use?Are cryptographic error messages or side channel information\n exploitable, for example in the form of padding oracle attacks?See ASVS Crypto (V7), Data Protection (V9), and SSL/TLS (V10)How to PreventDo the following, at a minimum, and consult the references:Classify data processed, stored, or transmitted by an application.\n Identify which data is sensitive according to privacy laws,\n regulatory requirements, or business needs.Don't store sensitive data unnecessarily. Discard it as soon as\n possible or use PCI DSS compliant tokenization or even truncation.\n Data that is not retained cannot be stolen.Make sure to encrypt all sensitive data at rest.Ensure up-to-date and strong standard algorithms, protocols, and\n keys are in place; use proper key management.Encrypt all data in transit with secure protocols such as TLS with\n forward secrecy (FS) ciphers, cipher prioritization by the\n server, and secure parameters. Enforce encryption using directives\n like HTTP Strict Transport Security (HSTS).Disable caching for response that contain sensitive data.Apply required security controls as per the data classification.Do not use legacy protocols such as FTP and SMTP for transporting\n sensitive data.Store passwords using strong adaptive and salted hashing functions\n with a work factor (delay factor), such as Argon2, scrypt, bcrypt or\n PBKDF2.Initialization vectors must be chosen appropriate for the mode of\n operation. For many modes, this means using a CSPRNG (cryptographically\n secure pseudo random number generator). For modes that require a\n nonce, then the initialization vector (IV) does not need a CSPRNG. In all cases, the IV\n should never be used twice for a fixed key.Always use authenticated encryption instead of just encryption.Keys should be generated cryptographically randomly and stored in\n memory as byte arrays. If a password is used, then it must be converted\n to a key via an appropriate password base key derivation function.Ensure that cryptographic randomness is used where appropriate, and\n that it has not been seeded in a predictable way or with low entropy.\n Most modern APIs do not require the developer to seed the CSPRNG to\n get security.Avoid deprecated cryptographic functions and padding schemes, such as\n MD5, SHA1, PKCS number 1 v1.5.Verify independently the effectiveness of configuration and\n settings.Example Attack ScenariosScenario #1: An application encrypts credit card numbers in a\ndatabase using automatic database encryption. However, this data is\nautomatically decrypted when retrieved, allowing a SQL injection flaw to\nretrieve credit card numbers in clear text.Scenario #2: A site doesn't use or enforce TLS for all pages or\nsupports weak encryption. An attacker monitors network traffic (e.g., at\nan insecure wireless network), downgrades connections from HTTPS to\nHTTP, intercepts requests, and steals the user's session cookie. The\nattacker then replays this cookie and hijacks the user's (authenticated)\nsession, accessing or modifying the user's private data. Instead of the\nabove they could alter all transported data, e.g., the recipient of a\nmoney transfer.Scenario #3: The password database uses unsalted or simple hashes to\nstore everyone's passwords. A file upload flaw allows an attacker to\nretrieve the password database. All the unsalted hashes can be exposed\nwith a rainbow table of pre-calculated hashes. Hashes generated by\nsimple or fast hash functions may be cracked by GPUs, even if they were\nsalted.ReferencesOWASP Proactive Controls: Protect Data EverywhereOWASP Application Security Verification Standard (V7, 9, 10)OWASP Cheat Sheet: Transport Layer ProtectionOWASP Cheat Sheet: User Privacy ProtectionOWASP Cheat Sheet: Password StorageOWASP Cheat Sheet: Cryptographic StorageOWASP Cheat Sheet: HSTSOWASP Testing Guide: Testing for weak cryptographyList of Mapped CWEsCWE-259 Use of Hard-coded PasswordCWE-261 Weak Encoding for PasswordCWE-296 Improper Following of a Certificate's Chain of TrustCWE-310 Cryptographic IssuesCWE-319 Cleartext Transmission of Sensitive InformationCWE-321 Use of Hard-coded Cryptographic KeyCWE-322 Key Exchange without Entity AuthenticationCWE-323 Reusing a Nonce, Key Pair in EncryptionCWE-324 Use of a Key Past its Expiration DateCWE-325 Missing Required Cryptographic StepCWE-326 Inadequate Encryption StrengthCWE-327 Use of a Broken or Risky Cryptographic AlgorithmCWE-328 Reversible One-Way HashCWE-329 Not Using a Random IV with CBC ModeCWE-330 Use of Insufficiently Random ValuesCWE-331 Insufficient EntropyCWE-335 Incorrect Usage of Seeds in Pseudo-Random Number Generator(PRNG)CWE-336 Same Seed in Pseudo-Random Number Generator (PRNG)CWE-337 Predictable Seed in Pseudo-Random Number Generator (PRNG)CWE-338 Use of Cryptographically Weak Pseudo-Random Number Generator(PRNG)CWE-340 Generation of Predictable Numbers or IdentifiersCWE-347 Improper Verification of Cryptographic SignatureCWE-523 Unprotected Transport of CredentialsCWE-720 OWASP Top Ten 2007 Category A9 - Insecure CommunicationsCWE-757 Selection of Less-Secure Algorithm During Negotiation('Algorithm Downgrade')CWE-759 Use of a One-Way Hash without a SaltCWE-760 Use of a One-Way Hash with a Predictable SaltCWE-780 Use of RSA Algorithm without OAEPCWE-818 Insufficient Transport Layer ProtectionCWE-916 Use of Password Hash With Insufficient Computational Effort\n\nShifting up one position to #2, previously known asSensitive Data\nExposure, which is more of a broad symptom rather than a root cause,\nthe focus is on failures related to cryptography (or lack thereof).\nWhich often lead to exposure of sensitive data. Notable Common Weakness Enumerations (CWEs) included\nareCWE-259: Use of Hard-coded Password,CWE-327: Broken or Risky\nCrypto Algorithm, andCWE-331 Insufficient Entropy.\n\nThe first thing is to determine the protection needs of data in transit\nand at rest. For example, passwords, credit card numbers, health\nrecords, personal information, and business secrets require extra\nprotection, mainly if that data falls under privacy laws, e.g., EU's\nGeneral Data Protection Regulation (GDPR), or regulations, e.g.,\nfinancial data protection such as PCI Data Security Standard (PCI DSS).\nFor all such data:\n\nIs any data transmitted in clear text? This concerns protocols such\n as HTTP, SMTP, FTP also using TLS upgrades like STARTTLS. External \n internet traffic is hazardous. Verify all internal traffic, e.g., \n between load balancers, web servers, or back-end systems.\n\nAre any old or weak cryptographic algorithms or protocols used either \n by default or in older code?\n\nAre default crypto keys in use, weak crypto keys generated or\n re-used, or is proper key management or rotation missing?\n Are crypto keys checked into source code repositories?\n\nIs encryption not enforced, e.g., are any HTTP headers (browser)\n security directives or headers missing?\n\nIs the received server certificate and the trust chain properly validated?\n\nAre initialization vectors ignored, reused, or not generated\n sufficiently secure for the cryptographic mode of operation?\n Is an insecure mode of operation such as ECB in use? Is encryption\n used when authenticated encryption is more appropriate?\n\nAre passwords being used as cryptographic keys in absence of a\n password base key derivation function?\n\nIs randomness used for cryptographic purposes that was not designed\n to meet cryptographic requirements? Even if the correct function is\n chosen, does it need to be seeded by the developer, and if not, has\n the developer over-written the strong seeding functionality built into\n it with a seed that lacks sufficient entropy/unpredictability?\n\nAre deprecated hash functions such as MD5 or SHA1 in use, or are\n non-cryptographic hash functions used when cryptographic hash functions\n are needed?\n\nAre deprecated cryptographic padding methods such as PKCS number 1 v1.5\n in use?\n\nAre cryptographic error messages or side channel information\n exploitable, for example in the form of padding oracle attacks?\n\nSee ASVS Crypto (V7), Data Protection (V9), and SSL/TLS (V10)\n\nDo the following, at a minimum, and consult the references:\n\nClassify data processed, stored, or transmitted by an application.\n Identify which data is sensitive according to privacy laws,\n regulatory requirements, or business needs.\n\nDon't store sensitive data unnecessarily. Discard it as soon as\n possible or use PCI DSS compliant tokenization or even truncation.\n Data that is not retained cannot be stolen.\n\nMake sure to encrypt all sensitive data at rest.\n\nEnsure up-to-date and strong standard algorithms, protocols, and\n keys are in place; use proper key management.\n\nEncrypt all data in transit with secure protocols such as TLS with\n forward secrecy (FS) ciphers, cipher prioritization by the\n server, and secure parameters. Enforce encryption using directives\n like HTTP Strict Transport Security (HSTS).\n\nDisable caching for response that contain sensitive data.\n\nApply required security controls as per the data classification.\n\nDo not use legacy protocols such as FTP and SMTP for transporting\n sensitive data.\n\nStore passwords using strong adaptive and salted hashing functions\n with a work factor (delay factor), such as Argon2, scrypt, bcrypt or\n PBKDF2.\n\nInitialization vectors must be chosen appropriate for the mode of\n operation. For many modes, this means using a CSPRNG (cryptographically\n secure pseudo random number generator). For modes that require a\n nonce, then the initialization vector (IV) does not need a CSPRNG. In all cases, the IV\n should never be used twice for a fixed key.\n\nAlways use authenticated encryption instead of just encryption.\n\nKeys should be generated cryptographically randomly and stored in\n memory as byte arrays. If a password is used, then it must be converted\n to a key via an appropriate password base key derivation function.\n\nEnsure that cryptographic randomness is used where appropriate, and\n that it has not been seeded in a predictable way or with low entropy.\n Most modern APIs do not require the developer to seed the CSPRNG to\n get security.\n\nAvoid deprecated cryptographic functions and padding schemes, such as\n MD5, SHA1, PKCS number 1 v1.5.\n\nVerify independently the effectiveness of configuration and\n settings.\n\nScenario #1: An application encrypts credit card numbers in a\ndatabase using automatic database encryption. However, this data is\nautomatically decrypted when retrieved, allowing a SQL injection flaw to\nretrieve credit card numbers in clear text.\n\nScenario #2: A site doesn't use or enforce TLS for all pages or\nsupports weak encryption. An attacker monitors network traffic (e.g., at\nan insecure wireless network), downgrades connections from HTTPS to\nHTTP, intercepts requests, and steals the user's session cookie. The\nattacker then replays this cookie and hijacks the user's (authenticated)\nsession, accessing or modifying the user's private data. Instead of the\nabove they could alter all transported data, e.g., the recipient of a\nmoney transfer.\n\nScenario #3: The password database uses unsalted or simple hashes to\nstore everyone's passwords. A file upload flaw allows an attacker to\nretrieve the password database. All the unsalted hashes can be exposed\nwith a rainbow table of pre-calculated hashes. Hashes generated by\nsimple or fast hash functions may be cracked by GPUs, even if they were\nsalted.\n\nOWASP Proactive Controls: Protect Data Everywhere\n\nOWASP Application Security Verification Standard (V7, 9, 10)\n\nOWASP Cheat Sheet: Transport Layer Protection\n\nOWASP Cheat Sheet: User Privacy Protection\n\nOWASP Cheat Sheet: Password Storage\n\nOWASP Cheat Sheet: Cryptographic Storage\n\nOWASP Cheat Sheet: HSTS\n\nOWASP Testing Guide: Testing for weak cryptography\n\nCWE-259 Use of Hard-coded Password\n\nCWE-261 Weak Encoding for Password\n\nCWE-296 Improper Following of a Certificate's Chain of Trust\n\nCWE-310 Cryptographic Issues\n\nCWE-319 Cleartext Transmission of Sensitive Information\n\nCWE-321 Use of Hard-coded Cryptographic Key\n\nCWE-322 Key Exchange without Entity Authentication\n\nCWE-323 Reusing a Nonce, Key Pair in Encryption\n\nCWE-324 Use of a Key Past its Expiration Date\n\nCWE-325 Missing Required Cryptographic Step\n\nCWE-326 Inadequate Encryption Strength\n\nCWE-327 Use of a Broken or Risky Cryptographic Algorithm\n\nCWE-328 Reversible One-Way Hash\n\nCWE-329 Not Using a Random IV with CBC Mode\n\nCWE-330 Use of Insufficiently Random Values\n\nCWE-331 Insufficient Entropy\n\nCWE-335 Incorrect Usage of Seeds in Pseudo-Random Number Generator(PRNG)\n\nCWE-336 Same Seed in Pseudo-Random Number Generator (PRNG)\n\nCWE-337 Predictable Seed in Pseudo-Random Number Generator (PRNG)\n\nCWE-338 Use of Cryptographically Weak Pseudo-Random Number Generator(PRNG)\n\nCWE-340 Generation of Predictable Numbers or Identifiers\n\nCWE-347 Improper Verification of Cryptographic Signature\n\nCWE-523 Unprotected Transport of Credentials\n\nCWE-720 OWASP Top Ten 2007 Category A9 - Insecure Communications\n\nCWE-757 Selection of Less-Secure Algorithm During Negotiation('Algorithm Downgrade')\n\nCWE-759 Use of a One-Way Hash without a Salt\n\nCWE-760 Use of a One-Way Hash with a Predictable Salt\n\nCWE-780 Use of RSA Algorithm without OAEP\n\nCWE-818 Insufficient Transport Layer Protection\n\nCWE-916 Use of Password Hash With Insufficient Computational Effort", "url": "https://owasp.org/Top10/A02_2021-Cryptographic_Failures/"}
{"source": "owasp", "id": "A03:2021", "title": "Injection", "description": "OWASP Top 10:2021OWASP/Top10HomeNoticeIntroductionHow to use the OWASP Top 10 as a standardHow to start an AppSec program with the OWASP Top 10About OWASPTop 10:2021 ListTop 10:2021 ListA01 Broken Access ControlA02 Cryptographic FailuresA03 InjectionA03 InjectionTable of contentsFactorsOverviewDescriptionHow to PreventExample Attack ScenariosReferencesList of Mapped CWEsA04 Insecure DesignA05 Security MisconfigurationA06 Vulnerable and Outdated ComponentsA07 Identification and Authentication FailuresA08 Software and Data Integrity FailuresA09 Security Logging and Monitoring FailuresA10 Server Side Request Forgery (SSRF)Next StepsTable of contentsFactorsOverviewDescriptionHow to PreventExample Attack ScenariosReferencesList of Mapped CWEsA03:2021 – InjectionFactorsCWEs MappedMax Incidence RateAvg Incidence RateAvg Weighted ExploitAvg Weighted ImpactMax CoverageAvg CoverageTotal OccurrencesTotal CVEs3319.09%3.37%7.257.1594.04%47.90%274,22832,078OverviewInjection slides down to the third position. 94% of the applications\nwere tested for some form of injection with a max incidence rate of 19%, an average incidence rate of 3%, and 274k occurrences. Notable Common Weakness Enumerations (CWEs) included areCWE-79: Cross-site Scripting,CWE-89: SQL Injection, andCWE-73:\nExternal Control of File Name or Path.DescriptionAn application is vulnerable to attack when:User-supplied data is not validated, filtered, or sanitized by the\n application.Dynamic queries or non-parameterized calls without context-aware\n escaping are used directly in the interpreter.Hostile data is used within object-relational mapping (ORM) search\n parameters to extract additional, sensitive records.Hostile data is directly used or concatenated. The SQL or command\n contains the structure and malicious data in dynamic queries,\n commands, or stored procedures.Some of the more common injections are SQL, NoSQL, OS command, Object\nRelational Mapping (ORM), LDAP, and Expression Language (EL) or Object\nGraph Navigation Library (OGNL) injection. The concept is identical\namong all interpreters. Source code review is the best method of\ndetecting if applications are vulnerable to injections. Automated\ntesting of all parameters, headers, URL, cookies, JSON, SOAP, and XML\ndata inputs is strongly encouraged. Organizations can include\nstatic (SAST), dynamic (DAST), and interactive (IAST) application security testing tools into the CI/CD\npipeline to identify introduced injection flaws before production\ndeployment.How to PreventPreventing injection requires keeping data separate from commands and queries:The preferred option is to use a safe API, which avoids using the\n interpreter entirely, provides a parameterized interface, or\n migrates to Object Relational Mapping Tools (ORMs).Note:Even when parameterized, stored procedures can still introduce\n SQL injection if PL/SQL or T-SQL concatenates queries and data or\n executes hostile data with EXECUTE IMMEDIATE or exec().Use positive server-side input validation. This is\n not a complete defense as many applications require special\n characters, such as text areas or APIs for mobile applications.For any residual dynamic queries, escape special characters using\n the specific escape syntax for that interpreter.Note:SQL structures such as table names, column names, and so on\n cannot be escaped, and thus user-supplied structure names are\n dangerous. This is a common issue in report-writing software.Example Attack ScenariosScenario #1:An application uses untrusted data in the construction\nof the following vulnerable SQL call:String query = \"SELECT \\* FROM accounts WHERE custID='\" + request.getParameter(\"id\") + \"'\";Scenario #2:Similarly, an application’s blind trust in frameworks\nmay result in queries that are still vulnerable, (e.g., Hibernate Query\nLanguage (HQL)):Query HQLQuery = session.createQuery(\"FROM accounts WHERE custID='\" + request.getParameter(\"id\") + \"'\");In both cases, the attacker modifies the ‘id’ parameter value in their\nbrowser to send: ' UNION SLEEP(10);--. For example:http://example.com/app/accountView?id=' UNION SELECT SLEEP(10);--This changes the meaning of both queries to return all the records from\nthe accounts table. More dangerous attacks could modify or delete data\nor even invoke stored procedures.ReferencesOWASP Proactive Controls: Secure Database AccessOWASP ASVS: V5 Input Validation and EncodingOWASP Testing Guide: SQL Injection,Command Injection,\n andORM InjectionOWASP Cheat Sheet: Injection PreventionOWASP Cheat Sheet: SQL Injection PreventionOWASP Cheat Sheet: Injection Prevention in JavaOWASP Cheat Sheet: Query ParameterizationOWASP Automated Threats to Web Applications – OAT-014PortSwigger: Server-side template injectionList of Mapped CWEsCWE-20 Improper Input ValidationCWE-74 Improper Neutralization of Special Elements in Output Used by a\nDownstream Component ('Injection')CWE-75 Failure to Sanitize Special Elements into a Different Plane\n(Special Element Injection)CWE-77 Improper Neutralization of Special Elements used in a Command\n('Command Injection')CWE-78 Improper Neutralization of Special Elements used in an OS Command\n('OS Command Injection')CWE-79 Improper Neutralization of Input During Web Page Generation\n('Cross-site Scripting')CWE-80 Improper Neutralization of Script-Related HTML Tags in a Web Page\n(Basic XSS)CWE-83 Improper Neutralization of Script in Attributes in a Web PageCWE-87 Improper Neutralization of Alternate XSS SyntaxCWE-88 Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')CWE-89 Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')CWE-90 Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')CWE-91 XML Injection (aka Blind XPath Injection)CWE-93 Improper Neutralization of CRLF Sequences ('CRLF Injection')CWE-94 Improper Control of Generation of Code ('Code Injection')CWE-95 Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')CWE-96 Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')CWE-97 Improper Neutralization of Server-Side Includes (SSI) Within a Web PageCWE-98 Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')CWE-99 Improper Control of Resource Identifiers ('Resource Injection')CWE-100 Deprecated: Was catch-all for input validation issuesCWE-113 Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')CWE-116 Improper Encoding or Escaping of OutputCWE-138 Improper Neutralization of Special ElementsCWE-184 Incomplete List of Disallowed InputsCWE-470 Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')CWE-471 Modification of Assumed-Immutable Data (MAID)CWE-564 SQL Injection: HibernateCWE-610 Externally Controlled Reference to a Resource in Another SphereCWE-643 Improper Neutralization of Data within XPath Expressions ('XPath Injection')CWE-644 Improper Neutralization of HTTP Headers for Scripting SyntaxCWE-652 Improper Neutralization of Data within XQuery Expressions ('XQuery Injection')CWE-917 Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')\n\nOWASP Top 10:2021OWASP/Top10HomeNoticeIntroductionHow to use the OWASP Top 10 as a standardHow to start an AppSec program with the OWASP Top 10About OWASPTop 10:2021 ListTop 10:2021 ListA01 Broken Access ControlA02 Cryptographic FailuresA03 InjectionA03 InjectionTable of contentsFactorsOverviewDescriptionHow to PreventExample Attack ScenariosReferencesList of Mapped CWEsA04 Insecure DesignA05 Security MisconfigurationA06 Vulnerable and Outdated ComponentsA07 Identification and Authentication FailuresA08 Software and Data Integrity FailuresA09 Security Logging and Monitoring FailuresA10 Server Side Request Forgery (SSRF)Next Steps\n\nTable of contentsFactorsOverviewDescriptionHow to PreventExample Attack ScenariosReferencesList of Mapped CWEs\n\nA03:2021 – InjectionFactorsCWEs MappedMax Incidence RateAvg Incidence RateAvg Weighted ExploitAvg Weighted ImpactMax CoverageAvg CoverageTotal OccurrencesTotal CVEs3319.09%3.37%7.257.1594.04%47.90%274,22832,078OverviewInjection slides down to the third position. 94% of the applications\nwere tested for some form of injection with a max incidence rate of 19%, an average incidence rate of 3%, and 274k occurrences. Notable Common Weakness Enumerations (CWEs) included areCWE-79: Cross-site Scripting,CWE-89: SQL Injection, andCWE-73:\nExternal Control of File Name or Path.DescriptionAn application is vulnerable to attack when:User-supplied data is not validated, filtered, or sanitized by the\n application.Dynamic queries or non-parameterized calls without context-aware\n escaping are used directly in the interpreter.Hostile data is used within object-relational mapping (ORM) search\n parameters to extract additional, sensitive records.Hostile data is directly used or concatenated. The SQL or command\n contains the structure and malicious data in dynamic queries,\n commands, or stored procedures.Some of the more common injections are SQL, NoSQL, OS command, Object\nRelational Mapping (ORM), LDAP, and Expression Language (EL) or Object\nGraph Navigation Library (OGNL) injection. The concept is identical\namong all interpreters. Source code review is the best method of\ndetecting if applications are vulnerable to injections. Automated\ntesting of all parameters, headers, URL, cookies, JSON, SOAP, and XML\ndata inputs is strongly encouraged. Organizations can include\nstatic (SAST), dynamic (DAST), and interactive (IAST) application security testing tools into the CI/CD\npipeline to identify introduced injection flaws before production\ndeployment.How to PreventPreventing injection requires keeping data separate from commands and queries:The preferred option is to use a safe API, which avoids using the\n interpreter entirely, provides a parameterized interface, or\n migrates to Object Relational Mapping Tools (ORMs).Note:Even when parameterized, stored procedures can still introduce\n SQL injection if PL/SQL or T-SQL concatenates queries and data or\n executes hostile data with EXECUTE IMMEDIATE or exec().Use positive server-side input validation. This is\n not a complete defense as many applications require special\n characters, such as text areas or APIs for mobile applications.For any residual dynamic queries, escape special characters using\n the specific escape syntax for that interpreter.Note:SQL structures such as table names, column names, and so on\n cannot be escaped, and thus user-supplied structure names are\n dangerous. This is a common issue in report-writing software.Example Attack ScenariosScenario #1:An application uses untrusted data in the construction\nof the following vulnerable SQL call:String query = \"SELECT \\* FROM accounts WHERE custID='\" + request.getParameter(\"id\") + \"'\";Scenario #2:Similarly, an application’s blind trust in frameworks\nmay result in queries that are still vulnerable, (e.g., Hibernate Query\nLanguage (HQL)):Query HQLQuery = session.createQuery(\"FROM accounts WHERE custID='\" + request.getParameter(\"id\") + \"'\");In both cases, the attacker modifies the ‘id’ parameter value in their\nbrowser to send: ' UNION SLEEP(10);--. For example:http://example.com/app/accountView?id=' UNION SELECT SLEEP(10);--This changes the meaning of both queries to return all the records from\nthe accounts table. More dangerous attacks could modify or delete data\nor even invoke stored procedures.ReferencesOWASP Proactive Controls: Secure Database AccessOWASP ASVS: V5 Input Validation and EncodingOWASP Testing Guide: SQL Injection,Command Injection,\n andORM InjectionOWASP Cheat Sheet: Injection PreventionOWASP Cheat Sheet: SQL Injection PreventionOWASP Cheat Sheet: Injection Prevention in JavaOWASP Cheat Sheet: Query ParameterizationOWASP Automated Threats to Web Applications – OAT-014PortSwigger: Server-side template injectionList of Mapped CWEsCWE-20 Improper Input ValidationCWE-74 Improper Neutralization of Special Elements in Output Used by a\nDownstream Component ('Injection')CWE-75 Failure to Sanitize Special Elements into a Different Plane\n(Special Element Injection)CWE-77 Improper Neutralization of Special Elements used in a Command\n('Command Injection')CWE-78 Improper Neutralization of Special Elements used in an OS Command\n('OS Command Injection')CWE-79 Improper Neutralization of Input During Web Page Generation\n('Cross-site Scripting')CWE-80 Improper Neutralization of Script-Related HTML Tags in a Web Page\n(Basic XSS)CWE-83 Improper Neutralization of Script in Attributes in a Web PageCWE-87 Improper Neutralization of Alternate XSS SyntaxCWE-88 Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')CWE-89 Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')CWE-90 Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')CWE-91 XML Injection (aka Blind XPath Injection)CWE-93 Improper Neutralization of CRLF Sequences ('CRLF Injection')CWE-94 Improper Control of Generation of Code ('Code Injection')CWE-95 Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')CWE-96 Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')CWE-97 Improper Neutralization of Server-Side Includes (SSI) Within a Web PageCWE-98 Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')CWE-99 Improper Control of Resource Identifiers ('Resource Injection')CWE-100 Deprecated: Was catch-all for input validation issuesCWE-113 Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')CWE-116 Improper Encoding or Escaping of OutputCWE-138 Improper Neutralization of Special ElementsCWE-184 Incomplete List of Disallowed InputsCWE-470 Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')CWE-471 Modification of Assumed-Immutable Data (MAID)CWE-564 SQL Injection: HibernateCWE-610 Externally Controlled Reference to a Resource in Another SphereCWE-643 Improper Neutralization of Data within XPath Expressions ('XPath Injection')CWE-644 Improper Neutralization of HTTP Headers for Scripting SyntaxCWE-652 Improper Neutralization of Data within XQuery Expressions ('XQuery Injection')CWE-917 Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')\n\nInjection slides down to the third position. 94% of the applications\nwere tested for some form of injection with a max incidence rate of 19%, an average incidence rate of 3%, and 274k occurrences. Notable Common Weakness Enumerations (CWEs) included areCWE-79: Cross-site Scripting,CWE-89: SQL Injection, andCWE-73:\nExternal Control of File Name or Path.\n\nAn application is vulnerable to attack when:\n\nUser-supplied data is not validated, filtered, or sanitized by the\n application.\n\nDynamic queries or non-parameterized calls without context-aware\n escaping are used directly in the interpreter.\n\nHostile data is used within object-relational mapping (ORM) search\n parameters to extract additional, sensitive records.\n\nHostile data is directly used or concatenated. The SQL or command\n contains the structure and malicious data in dynamic queries,\n commands, or stored procedures.\n\nSome of the more common injections are SQL, NoSQL, OS command, Object\nRelational Mapping (ORM), LDAP, and Expression Language (EL) or Object\nGraph Navigation Library (OGNL) injection. The concept is identical\namong all interpreters. Source code review is the best method of\ndetecting if applications are vulnerable to injections. Automated\ntesting of all parameters, headers, URL, cookies, JSON, SOAP, and XML\ndata inputs is strongly encouraged. Organizations can include\nstatic (SAST), dynamic (DAST), and interactive (IAST) application security testing tools into the CI/CD\npipeline to identify introduced injection flaws before production\ndeployment.\n\nPreventing injection requires keeping data separate from commands and queries:\n\nThe preferred option is to use a safe API, which avoids using the\n interpreter entirely, provides a parameterized interface, or\n migrates to Object Relational Mapping Tools (ORMs).Note:Even when parameterized, stored procedures can still introduce\n SQL injection if PL/SQL or T-SQL concatenates queries and data or\n executes hostile data with EXECUTE IMMEDIATE or exec().\n\nUse positive server-side input validation. This is\n not a complete defense as many applications require special\n characters, such as text areas or APIs for mobile applications.\n\nFor any residual dynamic queries, escape special characters using\n the specific escape syntax for that interpreter.Note:SQL structures such as table names, column names, and so on\n cannot be escaped, and thus user-supplied structure names are\n dangerous. This is a common issue in report-writing software.\n\nScenario #1:An application uses untrusted data in the construction\nof the following vulnerable SQL call:\n\nScenario #2:Similarly, an application’s blind trust in frameworks\nmay result in queries that are still vulnerable, (e.g., Hibernate Query\nLanguage (HQL)):\n\nIn both cases, the attacker modifies the ‘id’ parameter value in their\nbrowser to send: ' UNION SLEEP(10);--. For example:\n\nThis changes the meaning of both queries to return all the records from\nthe accounts table. More dangerous attacks could modify or delete data\nor even invoke stored procedures.\n\nOWASP Proactive Controls: Secure Database Access\n\nOWASP ASVS: V5 Input Validation and Encoding\n\nOWASP Testing Guide: SQL Injection,Command Injection,\n andORM Injection\n\nOWASP Cheat Sheet: Injection Prevention\n\nOWASP Cheat Sheet: SQL Injection Prevention\n\nOWASP Cheat Sheet: Injection Prevention in Java\n\nOWASP Cheat Sheet: Query Parameterization\n\nOWASP Automated Threats to Web Applications – OAT-014\n\nPortSwigger: Server-side template injection\n\nCWE-20 Improper Input Validation\n\nCWE-74 Improper Neutralization of Special Elements in Output Used by a\nDownstream Component ('Injection')\n\nCWE-75 Failure to Sanitize Special Elements into a Different Plane\n(Special Element Injection)\n\nCWE-77 Improper Neutralization of Special Elements used in a Command\n('Command Injection')\n\nCWE-78 Improper Neutralization of Special Elements used in an OS Command\n('OS Command Injection')\n\nCWE-79 Improper Neutralization of Input During Web Page Generation\n('Cross-site Scripting')\n\nCWE-80 Improper Neutralization of Script-Related HTML Tags in a Web Page\n(Basic XSS)\n\nCWE-83 Improper Neutralization of Script in Attributes in a Web Page\n\nCWE-87 Improper Neutralization of Alternate XSS Syntax\n\nCWE-88 Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')\n\nCWE-89 Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\n\nCWE-90 Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')\n\nCWE-91 XML Injection (aka Blind XPath Injection)\n\nCWE-93 Improper Neutralization of CRLF Sequences ('CRLF Injection')\n\nCWE-94 Improper Control of Generation of Code ('Code Injection')\n\nCWE-95 Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')\n\nCWE-96 Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')\n\nCWE-97 Improper Neutralization of Server-Side Includes (SSI) Within a Web Page\n\nCWE-98 Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')\n\nCWE-99 Improper Control of Resource Identifiers ('Resource Injection')\n\nCWE-100 Deprecated: Was catch-all for input validation issues\n\nCWE-113 Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')\n\nCWE-116 Improper Encoding or Escaping of Output\n\nCWE-138 Improper Neutralization of Special Elements\n\nCWE-184 Incomplete List of Disallowed Inputs\n\nCWE-470 Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')\n\nCWE-471 Modification of Assumed-Immutable Data (MAID)\n\nCWE-564 SQL Injection: Hibernate\n\nCWE-610 Externally Controlled Reference to a Resource in Another Sphere\n\nCWE-643 Improper Neutralization of Data within XPath Expressions ('XPath Injection')\n\nCWE-644 Improper Neutralization of HTTP Headers for Scripting Syntax\n\nCWE-652 Improper Neutralization of Data within XQuery Expressions ('XQuery Injection')\n\nCWE-917 Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')", "url": "https://owasp.org/Top10/A03_2021-Injection/"}
{"source": "owasp", "id": "A04:2021", "title": "Insecure Design", "description": "OWASP Top 10:2021OWASP/Top10HomeNoticeIntroductionHow to use the OWASP Top 10 as a standardHow to start an AppSec program with the OWASP Top 10About OWASPTop 10:2021 ListTop 10:2021 ListA01 Broken Access ControlA02 Cryptographic FailuresA03 InjectionA04 Insecure DesignA04 Insecure DesignTable of contentsFactorsOverviewDescriptionRequirements and Resource ManagementSecure DesignSecure Development LifecycleHow to PreventExample Attack ScenariosReferencesList of Mapped CWEsA05 Security MisconfigurationA06 Vulnerable and Outdated ComponentsA07 Identification and Authentication FailuresA08 Software and Data Integrity FailuresA09 Security Logging and Monitoring FailuresA10 Server Side Request Forgery (SSRF)Next StepsTable of contentsFactorsOverviewDescriptionRequirements and Resource ManagementSecure DesignSecure Development LifecycleHow to PreventExample Attack ScenariosReferencesList of Mapped CWEsA04:2021 – Insecure DesignFactorsCWEs MappedMax Incidence RateAvg Incidence RateAvg Weighted ExploitAvg Weighted ImpactMax CoverageAvg CoverageTotal OccurrencesTotal CVEs4024.19%3.00%6.466.7877.25%42.51%262,4072,691OverviewA new category for 2021 focuses on risks related to design and architectural flaws, with a call for more use of threat modeling, secure design patterns, and reference architectures. As a community we need to move beyond \"shift-left\" in the coding space to pre-code activities that are critical for the principles of Secure by Design. Notable Common Weakness Enumerations (CWEs) includeCWE-209: Generation of Error Message Containing Sensitive Information,CWE-256: Unprotected Storage of Credentials,CWE-501: Trust Boundary Violation, andCWE-522: Insufficiently Protected Credentials.DescriptionInsecure design is a broad category representing different weaknesses, expressed as “missing or ineffective control design.” Insecure design is not the source for all other Top 10 risk categories. There is a difference between insecure design and insecure implementation. We differentiate between design flaws and implementation defects for a reason, they have different root causes and remediation. A secure design can still have implementation defects leading to vulnerabilities that may be exploited. An insecure design cannot be fixed by a perfect implementation as by definition, needed security controls were never created to defend against specific attacks. One of the factors that contribute to insecure design is the lack of business risk profiling inherent in the software or system being developed, and thus the failure to determine what level of security design is required.Requirements and Resource ManagementCollect and negotiate the business requirements for an application with the business, including the protection requirements concerning confidentiality, integrity, availability, and authenticity of all data assets and the expected business logic. Take into account how exposed your application will be and if you need segregation of tenants (additionally to access control). Compile the technical requirements, including functional and non-functional security requirements. Plan and negotiate the budget covering all design, build, testing, and operation, including security activities.Secure DesignSecure design is a culture and methodology that constantly evaluates threats and ensures that code is robustly designed and tested to prevent known attack methods. Threat modeling should be integrated into refinement sessions (or similar activities); look for changes in data flows and access control or other security controls. In the user story development determine the correct flow and failure states, ensure they are well understood and agreed upon by responsible and impacted parties. Analyze assumptions and conditions for expected and failure flows, ensure they are still accurate and desirable. Determine how to validate the assumptions and enforce conditions needed for proper behaviors. Ensure the results are documented in the user story. Learn from mistakes and offer positive incentives to promote improvements. Secure design is neither an add-on nor a tool that you can add to software.Secure Development LifecycleSecure software requires a secure development lifecycle, some form of secure design pattern, paved road methodology, secured component library, tooling, and threat modeling. Reach out for your security specialists at the beginning of a software project throughout the whole project and maintenance of your software. Consider leveraging theOWASP Software Assurance Maturity Model (SAMM)to help structure your secure software development efforts.How to PreventEstablish and use a secure development lifecycle with AppSec\n professionals to help evaluate and design security and\n privacy-related controlsEstablish and use a library of secure design patterns or paved road\n ready to use componentsUse threat modeling for critical authentication, access control,\n business logic, and key flowsIntegrate security language and controls into user storiesIntegrate plausibility checks at each tier of your application\n (from frontend to backend)Write unit and integration tests to validate that all critical flows \n are resistant to the threat model. Compile use-casesandmisuse-cases\n for each tier of your application.Segregate tier layers on the system and network layers depending on the\n exposure and protection needsSegregate tenants robustly by design throughout all tiersLimit resource consumption by user or serviceExample Attack ScenariosScenario #1:A credential recovery workflow might include “questions\nand answers,” which is prohibited by NIST 800-63b, the OWASP ASVS, and\nthe OWASP Top 10. Questions and answers cannot be trusted as evidence of\nidentity as more than one person can know the answers, which is why they\nare prohibited. Such code should be removed and replaced with a more\nsecure design.Scenario #2:A cinema chain allows group booking discounts and has a\nmaximum of fifteen attendees before requiring a deposit. Attackers could\nthreat model this flow and test if they could book six hundred seats and\nall cinemas at once in a few requests, causing a massive loss of income.Scenario #3:A retail chain’s e-commerce website does not have\nprotection against bots run by scalpers buying high-end video cards to\nresell auction websites. This creates terrible publicity for the video\ncard makers and retail chain owners and enduring bad blood with\nenthusiasts who cannot obtain these cards at any price. Careful anti-bot\ndesign and domain logic rules, such as purchases made within a few\nseconds of availability, might identify inauthentic purchases and\nrejected such transactions.ReferencesOWASP Cheat Sheet: Secure Design PrinciplesOWASP SAMM: Design:Security ArchitectureOWASP SAMM: Design:Threat AssessmentNIST – Guidelines on Minimum Standards for Developer Verification of SoftwareThe Threat Modeling ManifestoAwesome Threat ModelingList of Mapped CWEsCWE-73 External Control of File Name or PathCWE-183 Permissive List of Allowed InputsCWE-209 Generation of Error Message Containing Sensitive InformationCWE-213 Exposure of Sensitive Information Due to Incompatible PoliciesCWE-235 Improper Handling of Extra ParametersCWE-256 Unprotected Storage of CredentialsCWE-257 Storing Passwords in a Recoverable FormatCWE-266 Incorrect Privilege AssignmentCWE-269 Improper Privilege ManagementCWE-280 Improper Handling of Insufficient Permissions or PrivilegesCWE-311 Missing Encryption of Sensitive DataCWE-312 Cleartext Storage of Sensitive InformationCWE-313 Cleartext Storage in a File or on DiskCWE-316 Cleartext Storage of Sensitive Information in MemoryCWE-419 Unprotected Primary ChannelCWE-430 Deployment of Wrong HandlerCWE-434 Unrestricted Upload of File with Dangerous TypeCWE-444 Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling')CWE-451 User Interface (UI) Misrepresentation of Critical InformationCWE-472 External Control of Assumed-Immutable Web ParameterCWE-501 Trust Boundary ViolationCWE-522 Insufficiently Protected CredentialsCWE-525 Use of Web Browser Cache Containing Sensitive InformationCWE-539 Use of Persistent Cookies Containing Sensitive InformationCWE-579 J2EE Bad Practices: Non-serializable Object Stored in SessionCWE-598 Use of GET Request Method With Sensitive Query StringsCWE-602 Client-Side Enforcement of Server-Side SecurityCWE-642 External Control of Critical State DataCWE-646 Reliance on File Name or Extension of Externally-Supplied FileCWE-650 Trusting HTTP Permission Methods on the Server SideCWE-653 Insufficient CompartmentalizationCWE-656 Reliance on Security Through ObscurityCWE-657 Violation of Secure Design PrinciplesCWE-799 Improper Control of Interaction FrequencyCWE-807 Reliance on Untrusted Inputs in a Security DecisionCWE-840 Business Logic ErrorsCWE-841 Improper Enforcement of Behavioral WorkflowCWE-927 Use of Implicit Intent for Sensitive CommunicationCWE-1021 Improper Restriction of Rendered UI Layers or FramesCWE-1173 Improper Use of Validation Framework\n\nOWASP Top 10:2021OWASP/Top10HomeNoticeIntroductionHow to use the OWASP Top 10 as a standardHow to start an AppSec program with the OWASP Top 10About OWASPTop 10:2021 ListTop 10:2021 ListA01 Broken Access ControlA02 Cryptographic FailuresA03 InjectionA04 Insecure DesignA04 Insecure DesignTable of contentsFactorsOverviewDescriptionRequirements and Resource ManagementSecure DesignSecure Development LifecycleHow to PreventExample Attack ScenariosReferencesList of Mapped CWEsA05 Security MisconfigurationA06 Vulnerable and Outdated ComponentsA07 Identification and Authentication FailuresA08 Software and Data Integrity FailuresA09 Security Logging and Monitoring FailuresA10 Server Side Request Forgery (SSRF)Next Steps\n\nTable of contentsFactorsOverviewDescriptionRequirements and Resource ManagementSecure DesignSecure Development LifecycleHow to PreventExample Attack ScenariosReferencesList of Mapped CWEs\n\nA04:2021 – Insecure DesignFactorsCWEs MappedMax Incidence RateAvg Incidence RateAvg Weighted ExploitAvg Weighted ImpactMax CoverageAvg CoverageTotal OccurrencesTotal CVEs4024.19%3.00%6.466.7877.25%42.51%262,4072,691OverviewA new category for 2021 focuses on risks related to design and architectural flaws, with a call for more use of threat modeling, secure design patterns, and reference architectures. As a community we need to move beyond \"shift-left\" in the coding space to pre-code activities that are critical for the principles of Secure by Design. Notable Common Weakness Enumerations (CWEs) includeCWE-209: Generation of Error Message Containing Sensitive Information,CWE-256: Unprotected Storage of Credentials,CWE-501: Trust Boundary Violation, andCWE-522: Insufficiently Protected Credentials.DescriptionInsecure design is a broad category representing different weaknesses, expressed as “missing or ineffective control design.” Insecure design is not the source for all other Top 10 risk categories. There is a difference between insecure design and insecure implementation. We differentiate between design flaws and implementation defects for a reason, they have different root causes and remediation. A secure design can still have implementation defects leading to vulnerabilities that may be exploited. An insecure design cannot be fixed by a perfect implementation as by definition, needed security controls were never created to defend against specific attacks. One of the factors that contribute to insecure design is the lack of business risk profiling inherent in the software or system being developed, and thus the failure to determine what level of security design is required.Requirements and Resource ManagementCollect and negotiate the business requirements for an application with the business, including the protection requirements concerning confidentiality, integrity, availability, and authenticity of all data assets and the expected business logic. Take into account how exposed your application will be and if you need segregation of tenants (additionally to access control). Compile the technical requirements, including functional and non-functional security requirements. Plan and negotiate the budget covering all design, build, testing, and operation, including security activities.Secure DesignSecure design is a culture and methodology that constantly evaluates threats and ensures that code is robustly designed and tested to prevent known attack methods. Threat modeling should be integrated into refinement sessions (or similar activities); look for changes in data flows and access control or other security controls. In the user story development determine the correct flow and failure states, ensure they are well understood and agreed upon by responsible and impacted parties. Analyze assumptions and conditions for expected and failure flows, ensure they are still accurate and desirable. Determine how to validate the assumptions and enforce conditions needed for proper behaviors. Ensure the results are documented in the user story. Learn from mistakes and offer positive incentives to promote improvements. Secure design is neither an add-on nor a tool that you can add to software.Secure Development LifecycleSecure software requires a secure development lifecycle, some form of secure design pattern, paved road methodology, secured component library, tooling, and threat modeling. Reach out for your security specialists at the beginning of a software project throughout the whole project and maintenance of your software. Consider leveraging theOWASP Software Assurance Maturity Model (SAMM)to help structure your secure software development efforts.How to PreventEstablish and use a secure development lifecycle with AppSec\n professionals to help evaluate and design security and\n privacy-related controlsEstablish and use a library of secure design patterns or paved road\n ready to use componentsUse threat modeling for critical authentication, access control,\n business logic, and key flowsIntegrate security language and controls into user storiesIntegrate plausibility checks at each tier of your application\n (from frontend to backend)Write unit and integration tests to validate that all critical flows \n are resistant to the threat model. Compile use-casesandmisuse-cases\n for each tier of your application.Segregate tier layers on the system and network layers depending on the\n exposure and protection needsSegregate tenants robustly by design throughout all tiersLimit resource consumption by user or serviceExample Attack ScenariosScenario #1:A credential recovery workflow might include “questions\nand answers,” which is prohibited by NIST 800-63b, the OWASP ASVS, and\nthe OWASP Top 10. Questions and answers cannot be trusted as evidence of\nidentity as more than one person can know the answers, which is why they\nare prohibited. Such code should be removed and replaced with a more\nsecure design.Scenario #2:A cinema chain allows group booking discounts and has a\nmaximum of fifteen attendees before requiring a deposit. Attackers could\nthreat model this flow and test if they could book six hundred seats and\nall cinemas at once in a few requests, causing a massive loss of income.Scenario #3:A retail chain’s e-commerce website does not have\nprotection against bots run by scalpers buying high-end video cards to\nresell auction websites. This creates terrible publicity for the video\ncard makers and retail chain owners and enduring bad blood with\nenthusiasts who cannot obtain these cards at any price. Careful anti-bot\ndesign and domain logic rules, such as purchases made within a few\nseconds of availability, might identify inauthentic purchases and\nrejected such transactions.ReferencesOWASP Cheat Sheet: Secure Design PrinciplesOWASP SAMM: Design:Security ArchitectureOWASP SAMM: Design:Threat AssessmentNIST – Guidelines on Minimum Standards for Developer Verification of SoftwareThe Threat Modeling ManifestoAwesome Threat ModelingList of Mapped CWEsCWE-73 External Control of File Name or PathCWE-183 Permissive List of Allowed InputsCWE-209 Generation of Error Message Containing Sensitive InformationCWE-213 Exposure of Sensitive Information Due to Incompatible PoliciesCWE-235 Improper Handling of Extra ParametersCWE-256 Unprotected Storage of CredentialsCWE-257 Storing Passwords in a Recoverable FormatCWE-266 Incorrect Privilege AssignmentCWE-269 Improper Privilege ManagementCWE-280 Improper Handling of Insufficient Permissions or PrivilegesCWE-311 Missing Encryption of Sensitive DataCWE-312 Cleartext Storage of Sensitive InformationCWE-313 Cleartext Storage in a File or on DiskCWE-316 Cleartext Storage of Sensitive Information in MemoryCWE-419 Unprotected Primary ChannelCWE-430 Deployment of Wrong HandlerCWE-434 Unrestricted Upload of File with Dangerous TypeCWE-444 Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling')CWE-451 User Interface (UI) Misrepresentation of Critical InformationCWE-472 External Control of Assumed-Immutable Web ParameterCWE-501 Trust Boundary ViolationCWE-522 Insufficiently Protected CredentialsCWE-525 Use of Web Browser Cache Containing Sensitive InformationCWE-539 Use of Persistent Cookies Containing Sensitive InformationCWE-579 J2EE Bad Practices: Non-serializable Object Stored in SessionCWE-598 Use of GET Request Method With Sensitive Query StringsCWE-602 Client-Side Enforcement of Server-Side SecurityCWE-642 External Control of Critical State DataCWE-646 Reliance on File Name or Extension of Externally-Supplied FileCWE-650 Trusting HTTP Permission Methods on the Server SideCWE-653 Insufficient CompartmentalizationCWE-656 Reliance on Security Through ObscurityCWE-657 Violation of Secure Design PrinciplesCWE-799 Improper Control of Interaction FrequencyCWE-807 Reliance on Untrusted Inputs in a Security DecisionCWE-840 Business Logic ErrorsCWE-841 Improper Enforcement of Behavioral WorkflowCWE-927 Use of Implicit Intent for Sensitive CommunicationCWE-1021 Improper Restriction of Rendered UI Layers or FramesCWE-1173 Improper Use of Validation Framework\n\nA new category for 2021 focuses on risks related to design and architectural flaws, with a call for more use of threat modeling, secure design patterns, and reference architectures. As a community we need to move beyond \"shift-left\" in the coding space to pre-code activities that are critical for the principles of Secure by Design. Notable Common Weakness Enumerations (CWEs) includeCWE-209: Generation of Error Message Containing Sensitive Information,CWE-256: Unprotected Storage of Credentials,CWE-501: Trust Boundary Violation, andCWE-522: Insufficiently Protected Credentials.\n\nInsecure design is a broad category representing different weaknesses, expressed as “missing or ineffective control design.” Insecure design is not the source for all other Top 10 risk categories. There is a difference between insecure design and insecure implementation. We differentiate between design flaws and implementation defects for a reason, they have different root causes and remediation. A secure design can still have implementation defects leading to vulnerabilities that may be exploited. An insecure design cannot be fixed by a perfect implementation as by definition, needed security controls were never created to defend against specific attacks. One of the factors that contribute to insecure design is the lack of business risk profiling inherent in the software or system being developed, and thus the failure to determine what level of security design is required.\n\nCollect and negotiate the business requirements for an application with the business, including the protection requirements concerning confidentiality, integrity, availability, and authenticity of all data assets and the expected business logic. Take into account how exposed your application will be and if you need segregation of tenants (additionally to access control). Compile the technical requirements, including functional and non-functional security requirements. Plan and negotiate the budget covering all design, build, testing, and operation, including security activities.\n\nSecure design is a culture and methodology that constantly evaluates threats and ensures that code is robustly designed and tested to prevent known attack methods. Threat modeling should be integrated into refinement sessions (or similar activities); look for changes in data flows and access control or other security controls. In the user story development determine the correct flow and failure states, ensure they are well understood and agreed upon by responsible and impacted parties. Analyze assumptions and conditions for expected and failure flows, ensure they are still accurate and desirable. Determine how to validate the assumptions and enforce conditions needed for proper behaviors. Ensure the results are documented in the user story. Learn from mistakes and offer positive incentives to promote improvements. Secure design is neither an add-on nor a tool that you can add to software.\n\nSecure software requires a secure development lifecycle, some form of secure design pattern, paved road methodology, secured component library, tooling, and threat modeling. Reach out for your security specialists at the beginning of a software project throughout the whole project and maintenance of your software. Consider leveraging theOWASP Software Assurance Maturity Model (SAMM)to help structure your secure software development efforts.\n\nEstablish and use a secure development lifecycle with AppSec\n professionals to help evaluate and design security and\n privacy-related controls\n\nEstablish and use a library of secure design patterns or paved road\n ready to use components\n\nUse threat modeling for critical authentication, access control,\n business logic, and key flows\n\nIntegrate security language and controls into user stories\n\nIntegrate plausibility checks at each tier of your application\n (from frontend to backend)\n\nWrite unit and integration tests to validate that all critical flows \n are resistant to the threat model. Compile use-casesandmisuse-cases\n for each tier of your application.\n\nSegregate tier layers on the system and network layers depending on the\n exposure and protection needs\n\nSegregate tenants robustly by design throughout all tiers\n\nLimit resource consumption by user or service\n\nScenario #1:A credential recovery workflow might include “questions\nand answers,” which is prohibited by NIST 800-63b, the OWASP ASVS, and\nthe OWASP Top 10. Questions and answers cannot be trusted as evidence of\nidentity as more than one person can know the answers, which is why they\nare prohibited. Such code should be removed and replaced with a more\nsecure design.\n\nScenario #2:A cinema chain allows group booking discounts and has a\nmaximum of fifteen attendees before requiring a deposit. Attackers could\nthreat model this flow and test if they could book six hundred seats and\nall cinemas at once in a few requests, causing a massive loss of income.\n\nScenario #3:A retail chain’s e-commerce website does not have\nprotection against bots run by scalpers buying high-end video cards to\nresell auction websites. This creates terrible publicity for the video\ncard makers and retail chain owners and enduring bad blood with\nenthusiasts who cannot obtain these cards at any price. Careful anti-bot\ndesign and domain logic rules, such as purchases made within a few\nseconds of availability, might identify inauthentic purchases and\nrejected such transactions.\n\nOWASP Cheat Sheet: Secure Design Principles\n\nOWASP SAMM: Design:Security Architecture\n\nOWASP SAMM: Design:Threat Assessment\n\nNIST – Guidelines on Minimum Standards for Developer Verification of Software\n\nThe Threat Modeling Manifesto\n\nAwesome Threat Modeling\n\nCWE-73 External Control of File Name or Path\n\nCWE-183 Permissive List of Allowed Inputs\n\nCWE-209 Generation of Error Message Containing Sensitive Information\n\nCWE-213 Exposure of Sensitive Information Due to Incompatible Policies\n\nCWE-235 Improper Handling of Extra Parameters\n\nCWE-256 Unprotected Storage of Credentials\n\nCWE-257 Storing Passwords in a Recoverable Format\n\nCWE-266 Incorrect Privilege Assignment\n\nCWE-269 Improper Privilege Management\n\nCWE-280 Improper Handling of Insufficient Permissions or Privileges\n\nCWE-311 Missing Encryption of Sensitive Data\n\nCWE-312 Cleartext Storage of Sensitive Information\n\nCWE-313 Cleartext Storage in a File or on Disk\n\nCWE-316 Cleartext Storage of Sensitive Information in Memory\n\nCWE-419 Unprotected Primary Channel\n\nCWE-430 Deployment of Wrong Handler\n\nCWE-434 Unrestricted Upload of File with Dangerous Type\n\nCWE-444 Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling')\n\nCWE-451 User Interface (UI) Misrepresentation of Critical Information\n\nCWE-472 External Control of Assumed-Immutable Web Parameter\n\nCWE-501 Trust Boundary Violation\n\nCWE-522 Insufficiently Protected Credentials\n\nCWE-525 Use of Web Browser Cache Containing Sensitive Information\n\nCWE-539 Use of Persistent Cookies Containing Sensitive Information\n\nCWE-579 J2EE Bad Practices: Non-serializable Object Stored in Session\n\nCWE-598 Use of GET Request Method With Sensitive Query Strings\n\nCWE-602 Client-Side Enforcement of Server-Side Security\n\nCWE-642 External Control of Critical State Data\n\nCWE-646 Reliance on File Name or Extension of Externally-Supplied File\n\nCWE-650 Trusting HTTP Permission Methods on the Server Side\n\nCWE-653 Insufficient Compartmentalization\n\nCWE-656 Reliance on Security Through Obscurity\n\nCWE-657 Violation of Secure Design Principles\n\nCWE-799 Improper Control of Interaction Frequency\n\nCWE-807 Reliance on Untrusted Inputs in a Security Decision\n\nCWE-840 Business Logic Errors\n\nCWE-841 Improper Enforcement of Behavioral Workflow\n\nCWE-927 Use of Implicit Intent for Sensitive Communication\n\nCWE-1021 Improper Restriction of Rendered UI Layers or Frames\n\nCWE-1173 Improper Use of Validation Framework", "url": "https://owasp.org/Top10/A04_2021-Insecure_Design/"}
{"source": "owasp", "id": "A05:2021", "title": "Security Misconfiguration", "description": "OWASP Top 10:2021OWASP/Top10HomeNoticeIntroductionHow to use the OWASP Top 10 as a standardHow to start an AppSec program with the OWASP Top 10About OWASPTop 10:2021 ListTop 10:2021 ListA01 Broken Access ControlA02 Cryptographic FailuresA03 InjectionA04 Insecure DesignA05 Security MisconfigurationA05 Security MisconfigurationTable of contentsFactorsOverviewDescriptionHow to PreventExample Attack ScenariosReferencesList of Mapped CWEsA06 Vulnerable and Outdated ComponentsA07 Identification and Authentication FailuresA08 Software and Data Integrity FailuresA09 Security Logging and Monitoring FailuresA10 Server Side Request Forgery (SSRF)Next StepsTable of contentsFactorsOverviewDescriptionHow to PreventExample Attack ScenariosReferencesList of Mapped CWEsA05:2021 – Security MisconfigurationFactorsCWEs MappedMax Incidence RateAvg Incidence RateAvg Weighted ExploitAvg Weighted ImpactMax CoverageAvg CoverageTotal OccurrencesTotal CVEs2019.84%4.51%8.126.5689.58%44.84%208,387789OverviewMoving up from #6 in the previous edition, 90% of applications were\ntested for some form of misconfiguration, with an average incidence rate of 4.51%, and over 208k occurrences of a Common Weakness Enumeration (CWE) in this risk category. With more shifts into highly configurable software, it's not surprising to see this category move up.\nNotable CWEs included areCWE-16 ConfigurationandCWE-611 Improper\nRestriction of XML External Entity Reference.DescriptionThe application might be vulnerable if the application is:Missing appropriate security hardening across any part of the\n application stack or improperly configured permissions on cloud\n services.Unnecessary features are enabled or installed (e.g., unnecessary\n ports, services, pages, accounts, or privileges).Default accounts and their passwords are still enabled and\n unchanged.Error handling reveals stack traces or other overly informative\n error messages to users.For upgraded systems, the latest security features are disabled or\n not configured securely.The security settings in the application servers, application\n frameworks (e.g., Struts, Spring, ASP.NET), libraries, databases,\n etc., are not set to secure values.The server does not send security headers or directives, or they are\n not set to secure values.The software is out of date or vulnerable (seeA06:2021-Vulnerable\n and Outdated Components).Without a concerted, repeatable application security configuration\nprocess, systems are at a higher risk.How to PreventSecure installation processes should be implemented, including:A repeatable hardening process makes it fast and easy to deploy\n another environment that is appropriately locked down. Development,\n QA, and production environments should all be configured\n identically, with different credentials used in each environment.\n This process should be automated to minimize the effort required to\n set up a new secure environment.A minimal platform without any unnecessary features, components,\n documentation, and samples. Remove or do not install unused features\n and frameworks.A task to review and update the configurations appropriate to all\n security notes, updates, and patches as part of the patch management\n process (seeA06:2021-Vulnerable\n and Outdated Components). Review\n cloud storage permissions (e.g., S3 bucket permissions).A segmented application architecture provides effective and secure\n separation between components or tenants, with segmentation,\n containerization, or cloud security groups (ACLs).Sending security directives to clients, e.g., Security Headers.An automated process to verify the effectiveness of the\n configurations and settings in all environments.Example Attack ScenariosScenario #1:The application server comes with sample applications\nnot removed from the production server. These sample applications have\nknown security flaws attackers use to compromise the server. Suppose one\nof these applications is the admin console, and default accounts weren't\nchanged. In that case, the attacker logs in with default passwords and\ntakes over.Scenario #2:Directory listing is not disabled on the server. An\nattacker discovers they can simply list directories. The attacker finds\nand downloads the compiled Java classes, which they decompile and\nreverse engineer to view the code. The attacker then finds a severe\naccess control flaw in the application.Scenario #3:The application server's configuration allows detailed\nerror messages, e.g., stack traces, to be returned to users. This\npotentially exposes sensitive information or underlying flaws such as\ncomponent versions that are known to be vulnerable.Scenario #4:A cloud service provider (CSP) has default sharing\npermissions open to the Internet by other CSP users. This allows\nsensitive data stored within cloud storage to be accessed.ReferencesOWASP Testing Guide: Configuration\n ManagementOWASP Testing Guide: Testing for Error CodesApplication Security Verification Standard V14 ConfigurationNIST Guide to General Server\n HardeningCIS Security Configuration\n Guides/BenchmarksAmazon S3 Bucket Discovery and\n EnumerationList of Mapped CWEsCWE-2 7PK - EnvironmentCWE-11 ASP.NET Misconfiguration: Creating Debug BinaryCWE-13 ASP.NET Misconfiguration: Password in Configuration FileCWE-15 External Control of System or Configuration SettingCWE-16 ConfigurationCWE-260 Password in Configuration FileCWE-315 Cleartext Storage of Sensitive Information in a CookieCWE-520 .NET Misconfiguration: Use of ImpersonationCWE-526 Exposure of Sensitive Information Through Environmental VariablesCWE-537 Java Runtime Error Message Containing Sensitive InformationCWE-541 Inclusion of Sensitive Information in an Include FileCWE-547 Use of Hard-coded, Security-relevant ConstantsCWE-611 Improper Restriction of XML External Entity ReferenceCWE-614 Sensitive Cookie in HTTPS Session Without 'Secure' AttributeCWE-756 Missing Custom Error PageCWE-776 Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')CWE-942 Permissive Cross-domain Policy with Untrusted DomainsCWE-1004 Sensitive Cookie Without 'HttpOnly' FlagCWE-1032 OWASP Top Ten 2017 Category A6 - Security MisconfigurationCWE-1174 ASP.NET Misconfiguration: Improper Model Validation\n\nOWASP Top 10:2021OWASP/Top10HomeNoticeIntroductionHow to use the OWASP Top 10 as a standardHow to start an AppSec program with the OWASP Top 10About OWASPTop 10:2021 ListTop 10:2021 ListA01 Broken Access ControlA02 Cryptographic FailuresA03 InjectionA04 Insecure DesignA05 Security MisconfigurationA05 Security MisconfigurationTable of contentsFactorsOverviewDescriptionHow to PreventExample Attack ScenariosReferencesList of Mapped CWEsA06 Vulnerable and Outdated ComponentsA07 Identification and Authentication FailuresA08 Software and Data Integrity FailuresA09 Security Logging and Monitoring FailuresA10 Server Side Request Forgery (SSRF)Next Steps\n\nTable of contentsFactorsOverviewDescriptionHow to PreventExample Attack ScenariosReferencesList of Mapped CWEs\n\nA05:2021 – Security MisconfigurationFactorsCWEs MappedMax Incidence RateAvg Incidence RateAvg Weighted ExploitAvg Weighted ImpactMax CoverageAvg CoverageTotal OccurrencesTotal CVEs2019.84%4.51%8.126.5689.58%44.84%208,387789OverviewMoving up from #6 in the previous edition, 90% of applications were\ntested for some form of misconfiguration, with an average incidence rate of 4.51%, and over 208k occurrences of a Common Weakness Enumeration (CWE) in this risk category. With more shifts into highly configurable software, it's not surprising to see this category move up.\nNotable CWEs included areCWE-16 ConfigurationandCWE-611 Improper\nRestriction of XML External Entity Reference.DescriptionThe application might be vulnerable if the application is:Missing appropriate security hardening across any part of the\n application stack or improperly configured permissions on cloud\n services.Unnecessary features are enabled or installed (e.g., unnecessary\n ports, services, pages, accounts, or privileges).Default accounts and their passwords are still enabled and\n unchanged.Error handling reveals stack traces or other overly informative\n error messages to users.For upgraded systems, the latest security features are disabled or\n not configured securely.The security settings in the application servers, application\n frameworks (e.g., Struts, Spring, ASP.NET), libraries, databases,\n etc., are not set to secure values.The server does not send security headers or directives, or they are\n not set to secure values.The software is out of date or vulnerable (seeA06:2021-Vulnerable\n and Outdated Components).Without a concerted, repeatable application security configuration\nprocess, systems are at a higher risk.How to PreventSecure installation processes should be implemented, including:A repeatable hardening process makes it fast and easy to deploy\n another environment that is appropriately locked down. Development,\n QA, and production environments should all be configured\n identically, with different credentials used in each environment.\n This process should be automated to minimize the effort required to\n set up a new secure environment.A minimal platform without any unnecessary features, components,\n documentation, and samples. Remove or do not install unused features\n and frameworks.A task to review and update the configurations appropriate to all\n security notes, updates, and patches as part of the patch management\n process (seeA06:2021-Vulnerable\n and Outdated Components). Review\n cloud storage permissions (e.g., S3 bucket permissions).A segmented application architecture provides effective and secure\n separation between components or tenants, with segmentation,\n containerization, or cloud security groups (ACLs).Sending security directives to clients, e.g., Security Headers.An automated process to verify the effectiveness of the\n configurations and settings in all environments.Example Attack ScenariosScenario #1:The application server comes with sample applications\nnot removed from the production server. These sample applications have\nknown security flaws attackers use to compromise the server. Suppose one\nof these applications is the admin console, and default accounts weren't\nchanged. In that case, the attacker logs in with default passwords and\ntakes over.Scenario #2:Directory listing is not disabled on the server. An\nattacker discovers they can simply list directories. The attacker finds\nand downloads the compiled Java classes, which they decompile and\nreverse engineer to view the code. The attacker then finds a severe\naccess control flaw in the application.Scenario #3:The application server's configuration allows detailed\nerror messages, e.g., stack traces, to be returned to users. This\npotentially exposes sensitive information or underlying flaws such as\ncomponent versions that are known to be vulnerable.Scenario #4:A cloud service provider (CSP) has default sharing\npermissions open to the Internet by other CSP users. This allows\nsensitive data stored within cloud storage to be accessed.ReferencesOWASP Testing Guide: Configuration\n ManagementOWASP Testing Guide: Testing for Error CodesApplication Security Verification Standard V14 ConfigurationNIST Guide to General Server\n HardeningCIS Security Configuration\n Guides/BenchmarksAmazon S3 Bucket Discovery and\n EnumerationList of Mapped CWEsCWE-2 7PK - EnvironmentCWE-11 ASP.NET Misconfiguration: Creating Debug BinaryCWE-13 ASP.NET Misconfiguration: Password in Configuration FileCWE-15 External Control of System or Configuration SettingCWE-16 ConfigurationCWE-260 Password in Configuration FileCWE-315 Cleartext Storage of Sensitive Information in a CookieCWE-520 .NET Misconfiguration: Use of ImpersonationCWE-526 Exposure of Sensitive Information Through Environmental VariablesCWE-537 Java Runtime Error Message Containing Sensitive InformationCWE-541 Inclusion of Sensitive Information in an Include FileCWE-547 Use of Hard-coded, Security-relevant ConstantsCWE-611 Improper Restriction of XML External Entity ReferenceCWE-614 Sensitive Cookie in HTTPS Session Without 'Secure' AttributeCWE-756 Missing Custom Error PageCWE-776 Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')CWE-942 Permissive Cross-domain Policy with Untrusted DomainsCWE-1004 Sensitive Cookie Without 'HttpOnly' FlagCWE-1032 OWASP Top Ten 2017 Category A6 - Security MisconfigurationCWE-1174 ASP.NET Misconfiguration: Improper Model Validation\n\nMoving up from #6 in the previous edition, 90% of applications were\ntested for some form of misconfiguration, with an average incidence rate of 4.51%, and over 208k occurrences of a Common Weakness Enumeration (CWE) in this risk category. With more shifts into highly configurable software, it's not surprising to see this category move up.\nNotable CWEs included areCWE-16 ConfigurationandCWE-611 Improper\nRestriction of XML External Entity Reference.\n\nThe application might be vulnerable if the application is:\n\nMissing appropriate security hardening across any part of the\n application stack or improperly configured permissions on cloud\n services.\n\nUnnecessary features are enabled or installed (e.g., unnecessary\n ports, services, pages, accounts, or privileges).\n\nDefault accounts and their passwords are still enabled and\n unchanged.\n\nError handling reveals stack traces or other overly informative\n error messages to users.\n\nFor upgraded systems, the latest security features are disabled or\n not configured securely.\n\nThe security settings in the application servers, application\n frameworks (e.g., Struts, Spring, ASP.NET), libraries, databases,\n etc., are not set to secure values.\n\nThe server does not send security headers or directives, or they are\n not set to secure values.\n\nThe software is out of date or vulnerable (seeA06:2021-Vulnerable\n and Outdated Components).\n\nWithout a concerted, repeatable application security configuration\nprocess, systems are at a higher risk.\n\nSecure installation processes should be implemented, including:\n\nA repeatable hardening process makes it fast and easy to deploy\n another environment that is appropriately locked down. Development,\n QA, and production environments should all be configured\n identically, with different credentials used in each environment.\n This process should be automated to minimize the effort required to\n set up a new secure environment.\n\nA minimal platform without any unnecessary features, components,\n documentation, and samples. Remove or do not install unused features\n and frameworks.\n\nA task to review and update the configurations appropriate to all\n security notes, updates, and patches as part of the patch management\n process (seeA06:2021-Vulnerable\n and Outdated Components). Review\n cloud storage permissions (e.g., S3 bucket permissions).\n\nA segmented application architecture provides effective and secure\n separation between components or tenants, with segmentation,\n containerization, or cloud security groups (ACLs).\n\nSending security directives to clients, e.g., Security Headers.\n\nAn automated process to verify the effectiveness of the\n configurations and settings in all environments.\n\nScenario #1:The application server comes with sample applications\nnot removed from the production server. These sample applications have\nknown security flaws attackers use to compromise the server. Suppose one\nof these applications is the admin console, and default accounts weren't\nchanged. In that case, the attacker logs in with default passwords and\ntakes over.\n\nScenario #2:Directory listing is not disabled on the server. An\nattacker discovers they can simply list directories. The attacker finds\nand downloads the compiled Java classes, which they decompile and\nreverse engineer to view the code. The attacker then finds a severe\naccess control flaw in the application.\n\nScenario #3:The application server's configuration allows detailed\nerror messages, e.g., stack traces, to be returned to users. This\npotentially exposes sensitive information or underlying flaws such as\ncomponent versions that are known to be vulnerable.\n\nScenario #4:A cloud service provider (CSP) has default sharing\npermissions open to the Internet by other CSP users. This allows\nsensitive data stored within cloud storage to be accessed.\n\nOWASP Testing Guide: Configuration\n Management\n\nOWASP Testing Guide: Testing for Error Codes\n\nApplication Security Verification Standard V14 Configuration\n\nNIST Guide to General Server\n Hardening\n\nCIS Security Configuration\n Guides/Benchmarks\n\nAmazon S3 Bucket Discovery and\n Enumeration\n\nCWE-2 7PK - Environment\n\nCWE-11 ASP.NET Misconfiguration: Creating Debug Binary\n\nCWE-13 ASP.NET Misconfiguration: Password in Configuration File\n\nCWE-15 External Control of System or Configuration Setting\n\nCWE-260 Password in Configuration File\n\nCWE-315 Cleartext Storage of Sensitive Information in a Cookie\n\nCWE-520 .NET Misconfiguration: Use of Impersonation\n\nCWE-526 Exposure of Sensitive Information Through Environmental Variables\n\nCWE-537 Java Runtime Error Message Containing Sensitive Information\n\nCWE-541 Inclusion of Sensitive Information in an Include File\n\nCWE-547 Use of Hard-coded, Security-relevant Constants\n\nCWE-611 Improper Restriction of XML External Entity Reference\n\nCWE-614 Sensitive Cookie in HTTPS Session Without 'Secure' Attribute\n\nCWE-756 Missing Custom Error Page\n\nCWE-776 Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')\n\nCWE-942 Permissive Cross-domain Policy with Untrusted Domains\n\nCWE-1004 Sensitive Cookie Without 'HttpOnly' Flag\n\nCWE-1032 OWASP Top Ten 2017 Category A6 - Security Misconfiguration\n\nCWE-1174 ASP.NET Misconfiguration: Improper Model Validation", "url": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/"}
{"source": "owasp", "id": "A06:2021", "title": "Vulnerable and Outdated Components", "description": "OWASP Top 10:2021OWASP/Top10HomeNoticeIntroductionHow to use the OWASP Top 10 as a standardHow to start an AppSec program with the OWASP Top 10About OWASPTop 10:2021 ListTop 10:2021 ListA01 Broken Access ControlA02 Cryptographic FailuresA03 InjectionA04 Insecure DesignA05 Security MisconfigurationA06 Vulnerable and Outdated ComponentsA06 Vulnerable and Outdated ComponentsTable of contentsFactorsOverviewDescriptionHow to PreventExample Attack ScenariosReferencesList of Mapped CWEsA07 Identification and Authentication FailuresA08 Software and Data Integrity FailuresA09 Security Logging and Monitoring FailuresA10 Server Side Request Forgery (SSRF)Next StepsTable of contentsFactorsOverviewDescriptionHow to PreventExample Attack ScenariosReferencesList of Mapped CWEsA06:2021 – Vulnerable and Outdated ComponentsFactorsCWEs MappedMax Incidence RateAvg Incidence RateMax CoverageAvg CoverageAvg Weighted ExploitAvg Weighted ImpactTotal OccurrencesTotal CVEs327.96%8.77%51.78%22.47%5.005.0030,4570OverviewIt was #2 from the Top 10 community survey but also had enough data to make the\nTop 10 via data. Vulnerable Components are a known issue that we\nstruggle to test and assess risk and is the only category to not have\nany Common Vulnerability and Exposures (CVEs) mapped to the included CWEs, so a default exploits/impact\nweight of 5.0 is used. Notable CWEs included areCWE-1104: Use of\nUnmaintained Third-Party Componentsand the two CWEs from Top 10 2013\nand 2017.DescriptionYou are likely vulnerable:If you do not know the versions of all components you use (both\n client-side and server-side). This includes components you directly\n use as well as nested dependencies.If the software is vulnerable, unsupported, or out of date. This\n includes the OS, web/application server, database management system\n (DBMS), applications, APIs and all components, runtime environments,\n and libraries.If you do not scan for vulnerabilities regularly and subscribe to\n security bulletins related to the components you use.If you do not fix or upgrade the underlying platform, frameworks,\n and dependencies in a risk-based, timely fashion. This commonly\n happens in environments when patching is a monthly or quarterly task\n under change control, leaving organizations open to days or months\n of unnecessary exposure to fixed vulnerabilities.If software developers do not test the compatibility of updated,\n upgraded, or patched libraries.If you do not secure the components’ configurations (seeA05:2021-Security Misconfiguration).How to PreventThere should be a patch management process in place to:Remove unused dependencies, unnecessary features, components, files,\n and documentation.Continuously inventory the versions of both client-side and\n server-side components (e.g., frameworks, libraries) and their\n dependencies using tools like versions, OWASP Dependency Check,\n retire.js, etc. Continuously monitor sources like Common Vulnerability and \n Exposures (CVE) and National Vulnerability Database (NVD) for\n vulnerabilities in the components. Use software composition analysis\n tools to automate the process. Subscribe to email alerts for\n security vulnerabilities related to components you use.Only obtain components from official sources over secure links.\n Prefer signed packages to reduce the chance of including a modified,\n malicious component (seeA08:2021-Software and Data Integrity\n Failures).Monitor for libraries and components that are unmaintained or do not\n create security patches for older versions. If patching is not\n possible, consider deploying a virtual patch to monitor, detect, or\n protect against the discovered issue.Every organization must ensure an ongoing plan for monitoring, triaging,\nand applying updates or configuration changes for the lifetime of the\napplication or portfolio.Example Attack ScenariosScenario #1:Components typically run with the same privileges as\nthe application itself, so flaws in any component can result in serious\nimpact. Such flaws can be accidental (e.g., coding error) or intentional\n(e.g., a backdoor in a component). Some example exploitable component\nvulnerabilities discovered are:CVE-2017-5638, a Struts 2 remote code execution vulnerability that\n enables the execution of arbitrary code on the server, has been\n blamed for significant breaches.While the internet of things (IoT) is frequently difficult or\n impossible to patch, the importance of patching them can be great\n (e.g., biomedical devices).There are automated tools to help attackers find unpatched or\nmisconfigured systems. For example, the Shodan IoT search engine can\nhelp you find devices that still suffer from Heartbleed vulnerability\npatched in April 2014.ReferencesOWASP Application Security Verification Standard: V1 Architecture, design and threat modellingOWASP Dependency Check (for Java and .NET libraries)OWASP Testing Guide - Map Application Architecture (OTG-INFO-010)OWASP Virtual Patching Best PracticesThe Unfortunate Reality of Insecure LibrariesMITRE Common Vulnerabilities and Exposures (CVE) searchNational Vulnerability Database (NVD)Retire.js for detecting known vulnerable JavaScript librariesGitHub Advisory DatabaseRuby Libraries Security Advisory Database and ToolsSAFECode Software Integrity Controls [PDF]List of Mapped CWEsCWE-937 OWASP Top 10 2013: Using Components with Known VulnerabilitiesCWE-1035 2017 Top 10 A9: Using Components with Known VulnerabilitiesCWE-1104 Use of Unmaintained Third Party Components\n\nOWASP Top 10:2021OWASP/Top10HomeNoticeIntroductionHow to use the OWASP Top 10 as a standardHow to start an AppSec program with the OWASP Top 10About OWASPTop 10:2021 ListTop 10:2021 ListA01 Broken Access ControlA02 Cryptographic FailuresA03 InjectionA04 Insecure DesignA05 Security MisconfigurationA06 Vulnerable and Outdated ComponentsA06 Vulnerable and Outdated ComponentsTable of contentsFactorsOverviewDescriptionHow to PreventExample Attack ScenariosReferencesList of Mapped CWEsA07 Identification and Authentication FailuresA08 Software and Data Integrity FailuresA09 Security Logging and Monitoring FailuresA10 Server Side Request Forgery (SSRF)Next Steps\n\nTable of contentsFactorsOverviewDescriptionHow to PreventExample Attack ScenariosReferencesList of Mapped CWEs\n\nA06:2021 – Vulnerable and Outdated ComponentsFactorsCWEs MappedMax Incidence RateAvg Incidence RateMax CoverageAvg CoverageAvg Weighted ExploitAvg Weighted ImpactTotal OccurrencesTotal CVEs327.96%8.77%51.78%22.47%5.005.0030,4570OverviewIt was #2 from the Top 10 community survey but also had enough data to make the\nTop 10 via data. Vulnerable Components are a known issue that we\nstruggle to test and assess risk and is the only category to not have\nany Common Vulnerability and Exposures (CVEs) mapped to the included CWEs, so a default exploits/impact\nweight of 5.0 is used. Notable CWEs included areCWE-1104: Use of\nUnmaintained Third-Party Componentsand the two CWEs from Top 10 2013\nand 2017.DescriptionYou are likely vulnerable:If you do not know the versions of all components you use (both\n client-side and server-side). This includes components you directly\n use as well as nested dependencies.If the software is vulnerable, unsupported, or out of date. This\n includes the OS, web/application server, database management system\n (DBMS), applications, APIs and all components, runtime environments,\n and libraries.If you do not scan for vulnerabilities regularly and subscribe to\n security bulletins related to the components you use.If you do not fix or upgrade the underlying platform, frameworks,\n and dependencies in a risk-based, timely fashion. This commonly\n happens in environments when patching is a monthly or quarterly task\n under change control, leaving organizations open to days or months\n of unnecessary exposure to fixed vulnerabilities.If software developers do not test the compatibility of updated,\n upgraded, or patched libraries.If you do not secure the components’ configurations (seeA05:2021-Security Misconfiguration).How to PreventThere should be a patch management process in place to:Remove unused dependencies, unnecessary features, components, files,\n and documentation.Continuously inventory the versions of both client-side and\n server-side components (e.g., frameworks, libraries) and their\n dependencies using tools like versions, OWASP Dependency Check,\n retire.js, etc. Continuously monitor sources like Common Vulnerability and \n Exposures (CVE) and National Vulnerability Database (NVD) for\n vulnerabilities in the components. Use software composition analysis\n tools to automate the process. Subscribe to email alerts for\n security vulnerabilities related to components you use.Only obtain components from official sources over secure links.\n Prefer signed packages to reduce the chance of including a modified,\n malicious component (seeA08:2021-Software and Data Integrity\n Failures).Monitor for libraries and components that are unmaintained or do not\n create security patches for older versions. If patching is not\n possible, consider deploying a virtual patch to monitor, detect, or\n protect against the discovered issue.Every organization must ensure an ongoing plan for monitoring, triaging,\nand applying updates or configuration changes for the lifetime of the\napplication or portfolio.Example Attack ScenariosScenario #1:Components typically run with the same privileges as\nthe application itself, so flaws in any component can result in serious\nimpact. Such flaws can be accidental (e.g., coding error) or intentional\n(e.g., a backdoor in a component). Some example exploitable component\nvulnerabilities discovered are:CVE-2017-5638, a Struts 2 remote code execution vulnerability that\n enables the execution of arbitrary code on the server, has been\n blamed for significant breaches.While the internet of things (IoT) is frequently difficult or\n impossible to patch, the importance of patching them can be great\n (e.g., biomedical devices).There are automated tools to help attackers find unpatched or\nmisconfigured systems. For example, the Shodan IoT search engine can\nhelp you find devices that still suffer from Heartbleed vulnerability\npatched in April 2014.ReferencesOWASP Application Security Verification Standard: V1 Architecture, design and threat modellingOWASP Dependency Check (for Java and .NET libraries)OWASP Testing Guide - Map Application Architecture (OTG-INFO-010)OWASP Virtual Patching Best PracticesThe Unfortunate Reality of Insecure LibrariesMITRE Common Vulnerabilities and Exposures (CVE) searchNational Vulnerability Database (NVD)Retire.js for detecting known vulnerable JavaScript librariesGitHub Advisory DatabaseRuby Libraries Security Advisory Database and ToolsSAFECode Software Integrity Controls [PDF]List of Mapped CWEsCWE-937 OWASP Top 10 2013: Using Components with Known VulnerabilitiesCWE-1035 2017 Top 10 A9: Using Components with Known VulnerabilitiesCWE-1104 Use of Unmaintained Third Party Components\n\nIt was #2 from the Top 10 community survey but also had enough data to make the\nTop 10 via data. Vulnerable Components are a known issue that we\nstruggle to test and assess risk and is the only category to not have\nany Common Vulnerability and Exposures (CVEs) mapped to the included CWEs, so a default exploits/impact\nweight of 5.0 is used. Notable CWEs included areCWE-1104: Use of\nUnmaintained Third-Party Componentsand the two CWEs from Top 10 2013\nand 2017.\n\nYou are likely vulnerable:\n\nIf you do not know the versions of all components you use (both\n client-side and server-side). This includes components you directly\n use as well as nested dependencies.\n\nIf the software is vulnerable, unsupported, or out of date. This\n includes the OS, web/application server, database management system\n (DBMS), applications, APIs and all components, runtime environments,\n and libraries.\n\nIf you do not scan for vulnerabilities regularly and subscribe to\n security bulletins related to the components you use.\n\nIf you do not fix or upgrade the underlying platform, frameworks,\n and dependencies in a risk-based, timely fashion. This commonly\n happens in environments when patching is a monthly or quarterly task\n under change control, leaving organizations open to days or months\n of unnecessary exposure to fixed vulnerabilities.\n\nIf software developers do not test the compatibility of updated,\n upgraded, or patched libraries.\n\nIf you do not secure the components’ configurations (seeA05:2021-Security Misconfiguration).\n\nThere should be a patch management process in place to:\n\nRemove unused dependencies, unnecessary features, components, files,\n and documentation.\n\nContinuously inventory the versions of both client-side and\n server-side components (e.g., frameworks, libraries) and their\n dependencies using tools like versions, OWASP Dependency Check,\n retire.js, etc. Continuously monitor sources like Common Vulnerability and \n Exposures (CVE) and National Vulnerability Database (NVD) for\n vulnerabilities in the components. Use software composition analysis\n tools to automate the process. Subscribe to email alerts for\n security vulnerabilities related to components you use.\n\nOnly obtain components from official sources over secure links.\n Prefer signed packages to reduce the chance of including a modified,\n malicious component (seeA08:2021-Software and Data Integrity\n Failures).\n\nMonitor for libraries and components that are unmaintained or do not\n create security patches for older versions. If patching is not\n possible, consider deploying a virtual patch to monitor, detect, or\n protect against the discovered issue.\n\nEvery organization must ensure an ongoing plan for monitoring, triaging,\nand applying updates or configuration changes for the lifetime of the\napplication or portfolio.\n\nScenario #1:Components typically run with the same privileges as\nthe application itself, so flaws in any component can result in serious\nimpact. Such flaws can be accidental (e.g., coding error) or intentional\n(e.g., a backdoor in a component). Some example exploitable component\nvulnerabilities discovered are:\n\nCVE-2017-5638, a Struts 2 remote code execution vulnerability that\n enables the execution of arbitrary code on the server, has been\n blamed for significant breaches.\n\nWhile the internet of things (IoT) is frequently difficult or\n impossible to patch, the importance of patching them can be great\n (e.g., biomedical devices).\n\nThere are automated tools to help attackers find unpatched or\nmisconfigured systems. For example, the Shodan IoT search engine can\nhelp you find devices that still suffer from Heartbleed vulnerability\npatched in April 2014.\n\nOWASP Application Security Verification Standard: V1 Architecture, design and threat modelling\n\nOWASP Dependency Check (for Java and .NET libraries)\n\nOWASP Testing Guide - Map Application Architecture (OTG-INFO-010)\n\nOWASP Virtual Patching Best Practices\n\nThe Unfortunate Reality of Insecure Libraries\n\nMITRE Common Vulnerabilities and Exposures (CVE) search\n\nNational Vulnerability Database (NVD)\n\nRetire.js for detecting known vulnerable JavaScript libraries\n\nGitHub Advisory Database\n\nRuby Libraries Security Advisory Database and Tools\n\nSAFECode Software Integrity Controls [PDF]\n\nCWE-937 OWASP Top 10 2013: Using Components with Known Vulnerabilities\n\nCWE-1035 2017 Top 10 A9: Using Components with Known Vulnerabilities\n\nCWE-1104 Use of Unmaintained Third Party Components", "url": "https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components/"}
{"source": "owasp", "id": "A07:2021", "title": "Identification and Authentication Failures", "description": "OWASP Top 10:2021OWASP/Top10HomeNoticeIntroductionHow to use the OWASP Top 10 as a standardHow to start an AppSec program with the OWASP Top 10About OWASPTop 10:2021 ListTop 10:2021 ListA01 Broken Access ControlA02 Cryptographic FailuresA03 InjectionA04 Insecure DesignA05 Security MisconfigurationA06 Vulnerable and Outdated ComponentsA07 Identification and Authentication FailuresA07 Identification and Authentication FailuresTable of contentsFactorsOverviewDescriptionHow to PreventExample Attack ScenariosReferencesList of Mapped CWEsA08 Software and Data Integrity FailuresA09 Security Logging and Monitoring FailuresA10 Server Side Request Forgery (SSRF)Next StepsTable of contentsFactorsOverviewDescriptionHow to PreventExample Attack ScenariosReferencesList of Mapped CWEsA07:2021 – Identification and Authentication FailuresFactorsCWEs MappedMax Incidence RateAvg Incidence RateAvg Weighted ExploitAvg Weighted ImpactMax CoverageAvg CoverageTotal OccurrencesTotal CVEs2214.84%2.55%7.406.5079.51%45.72%132,1953,897OverviewPreviously known asBroken Authentication, this category slid down\nfrom the second position and now includes Common Weakness \nEnumerations (CWEs) related to identification\nfailures. Notable CWEs included areCWE-297: Improper Validation of\nCertificate with Host Mismatch,CWE-287: Improper Authentication, andCWE-384: Session Fixation.DescriptionConfirmation of the user's identity, authentication, and session\nmanagement is critical to protect against authentication-related\nattacks. There may be authentication weaknesses if the application:Permits automated attacks such as credential stuffing, where the\n attacker has a list of valid usernames and passwords.Permits brute force or other automated attacks.Permits default, weak, or well-known passwords, such as \"Password1\"\n or \"admin/admin\".Uses weak or ineffective credential recovery and forgot-password\n processes, such as \"knowledge-based answers,\" which cannot be made\n safe.Uses plain text, encrypted, or weakly hashed passwords data stores (seeA02:2021-Cryptographic Failures).Has missing or ineffective multi-factor authentication.Exposes session identifier in the URL.Reuse session identifier after successful login.Does not correctly invalidate Session IDs. User sessions or\n authentication tokens (mainly single sign-on (SSO) tokens) aren't\n properly invalidated during logout or a period of inactivity.How to PreventWhere possible, implement multi-factor authentication to prevent\n automated credential stuffing, brute force, and stolen credential\n reuse attacks.Do not ship or deploy with any default credentials, particularly for\n admin users.Implement weak password checks, such as testing new or changed\n passwords against the top 10,000 worst passwords list.Align password length, complexity, and rotation policies with\n National Institute of Standards and Technology (NIST)\n 800-63b's guidelines in section 5.1.1 for Memorized Secrets or other\n modern, evidence-based password policies.Ensure registration, credential recovery, and API pathways are\n hardened against account enumeration attacks by using the same\n messages for all outcomes.Limit or increasingly delay failed login attempts, but be careful not to create a denial of service scenario. Log all failures\n and alert administrators when credential stuffing, brute force, or\n other attacks are detected.Use a server-side, secure, built-in session manager that generates a\n new random session ID with high entropy after login. Session identifier\n should not be in the URL, be securely stored, and invalidated after\n logout, idle, and absolute timeouts.Example Attack ScenariosScenario #1:Credential stuffing, the use of lists of known\npasswords, is a common attack. Suppose an application does not implement\nautomated threat or credential stuffing protection. In that case, the\napplication can be used as a password oracle to determine if the\ncredentials are valid.Scenario #2:Most authentication attacks occur due to the continued\nuse of passwords as a sole factor. Once considered best practices,\npassword rotation and complexity requirements encourage users to use\nand reuse weak passwords. Organizations are recommended to stop these\npractices per NIST 800-63 and use multi-factor authentication.Scenario #3:Application session timeouts aren't set correctly. A\nuser uses a public computer to access an application. Instead of\nselecting \"logout,\" the user simply closes the browser tab and walks\naway. An attacker uses the same browser an hour later, and the user is\nstill authenticated.ReferencesOWASP Proactive Controls: Implement Digital IdentityOWASP Application Security Verification Standard: V2 authenticationOWASP Application Security Verification Standard: V3 Session ManagementOWASP Testing Guide: Identity,AuthenticationOWASP Cheat Sheet: AuthenticationOWASP Cheat Sheet: Credential StuffingOWASP Cheat Sheet: Forgot PasswordOWASP Cheat Sheet: Session ManagementOWASP Automated Threats HandbookNIST 800-63b: 5.1.1 Memorized SecretsList of Mapped CWEsCWE-255 Credentials Management ErrorsCWE-259 Use of Hard-coded PasswordCWE-287 Improper AuthenticationCWE-288 Authentication Bypass Using an Alternate Path or ChannelCWE-290 Authentication Bypass by SpoofingCWE-294 Authentication Bypass by Capture-replayCWE-295 Improper Certificate ValidationCWE-297 Improper Validation of Certificate with Host MismatchCWE-300 Channel Accessible by Non-EndpointCWE-302 Authentication Bypass by Assumed-Immutable DataCWE-304 Missing Critical Step in AuthenticationCWE-306 Missing Authentication for Critical FunctionCWE-307 Improper Restriction of Excessive Authentication AttemptsCWE-346 Origin Validation ErrorCWE-384 Session FixationCWE-521 Weak Password RequirementsCWE-613 Insufficient Session ExpirationCWE-620 Unverified Password ChangeCWE-640 Weak Password Recovery Mechanism for Forgotten PasswordCWE-798 Use of Hard-coded CredentialsCWE-940 Improper Verification of Source of a Communication ChannelCWE-1216 Lockout Mechanism Errors\n\nOWASP Top 10:2021OWASP/Top10HomeNoticeIntroductionHow to use the OWASP Top 10 as a standardHow to start an AppSec program with the OWASP Top 10About OWASPTop 10:2021 ListTop 10:2021 ListA01 Broken Access ControlA02 Cryptographic FailuresA03 InjectionA04 Insecure DesignA05 Security MisconfigurationA06 Vulnerable and Outdated ComponentsA07 Identification and Authentication FailuresA07 Identification and Authentication FailuresTable of contentsFactorsOverviewDescriptionHow to PreventExample Attack ScenariosReferencesList of Mapped CWEsA08 Software and Data Integrity FailuresA09 Security Logging and Monitoring FailuresA10 Server Side Request Forgery (SSRF)Next Steps\n\nTable of contentsFactorsOverviewDescriptionHow to PreventExample Attack ScenariosReferencesList of Mapped CWEs\n\nA07:2021 – Identification and Authentication FailuresFactorsCWEs MappedMax Incidence RateAvg Incidence RateAvg Weighted ExploitAvg Weighted ImpactMax CoverageAvg CoverageTotal OccurrencesTotal CVEs2214.84%2.55%7.406.5079.51%45.72%132,1953,897OverviewPreviously known asBroken Authentication, this category slid down\nfrom the second position and now includes Common Weakness \nEnumerations (CWEs) related to identification\nfailures. Notable CWEs included areCWE-297: Improper Validation of\nCertificate with Host Mismatch,CWE-287: Improper Authentication, andCWE-384: Session Fixation.DescriptionConfirmation of the user's identity, authentication, and session\nmanagement is critical to protect against authentication-related\nattacks. There may be authentication weaknesses if the application:Permits automated attacks such as credential stuffing, where the\n attacker has a list of valid usernames and passwords.Permits brute force or other automated attacks.Permits default, weak, or well-known passwords, such as \"Password1\"\n or \"admin/admin\".Uses weak or ineffective credential recovery and forgot-password\n processes, such as \"knowledge-based answers,\" which cannot be made\n safe.Uses plain text, encrypted, or weakly hashed passwords data stores (seeA02:2021-Cryptographic Failures).Has missing or ineffective multi-factor authentication.Exposes session identifier in the URL.Reuse session identifier after successful login.Does not correctly invalidate Session IDs. User sessions or\n authentication tokens (mainly single sign-on (SSO) tokens) aren't\n properly invalidated during logout or a period of inactivity.How to PreventWhere possible, implement multi-factor authentication to prevent\n automated credential stuffing, brute force, and stolen credential\n reuse attacks.Do not ship or deploy with any default credentials, particularly for\n admin users.Implement weak password checks, such as testing new or changed\n passwords against the top 10,000 worst passwords list.Align password length, complexity, and rotation policies with\n National Institute of Standards and Technology (NIST)\n 800-63b's guidelines in section 5.1.1 for Memorized Secrets or other\n modern, evidence-based password policies.Ensure registration, credential recovery, and API pathways are\n hardened against account enumeration attacks by using the same\n messages for all outcomes.Limit or increasingly delay failed login attempts, but be careful not to create a denial of service scenario. Log all failures\n and alert administrators when credential stuffing, brute force, or\n other attacks are detected.Use a server-side, secure, built-in session manager that generates a\n new random session ID with high entropy after login. Session identifier\n should not be in the URL, be securely stored, and invalidated after\n logout, idle, and absolute timeouts.Example Attack ScenariosScenario #1:Credential stuffing, the use of lists of known\npasswords, is a common attack. Suppose an application does not implement\nautomated threat or credential stuffing protection. In that case, the\napplication can be used as a password oracle to determine if the\ncredentials are valid.Scenario #2:Most authentication attacks occur due to the continued\nuse of passwords as a sole factor. Once considered best practices,\npassword rotation and complexity requirements encourage users to use\nand reuse weak passwords. Organizations are recommended to stop these\npractices per NIST 800-63 and use multi-factor authentication.Scenario #3:Application session timeouts aren't set correctly. A\nuser uses a public computer to access an application. Instead of\nselecting \"logout,\" the user simply closes the browser tab and walks\naway. An attacker uses the same browser an hour later, and the user is\nstill authenticated.ReferencesOWASP Proactive Controls: Implement Digital IdentityOWASP Application Security Verification Standard: V2 authenticationOWASP Application Security Verification Standard: V3 Session ManagementOWASP Testing Guide: Identity,AuthenticationOWASP Cheat Sheet: AuthenticationOWASP Cheat Sheet: Credential StuffingOWASP Cheat Sheet: Forgot PasswordOWASP Cheat Sheet: Session ManagementOWASP Automated Threats HandbookNIST 800-63b: 5.1.1 Memorized SecretsList of Mapped CWEsCWE-255 Credentials Management ErrorsCWE-259 Use of Hard-coded PasswordCWE-287 Improper AuthenticationCWE-288 Authentication Bypass Using an Alternate Path or ChannelCWE-290 Authentication Bypass by SpoofingCWE-294 Authentication Bypass by Capture-replayCWE-295 Improper Certificate ValidationCWE-297 Improper Validation of Certificate with Host MismatchCWE-300 Channel Accessible by Non-EndpointCWE-302 Authentication Bypass by Assumed-Immutable DataCWE-304 Missing Critical Step in AuthenticationCWE-306 Missing Authentication for Critical FunctionCWE-307 Improper Restriction of Excessive Authentication AttemptsCWE-346 Origin Validation ErrorCWE-384 Session FixationCWE-521 Weak Password RequirementsCWE-613 Insufficient Session ExpirationCWE-620 Unverified Password ChangeCWE-640 Weak Password Recovery Mechanism for Forgotten PasswordCWE-798 Use of Hard-coded CredentialsCWE-940 Improper Verification of Source of a Communication ChannelCWE-1216 Lockout Mechanism Errors\n\nPreviously known asBroken Authentication, this category slid down\nfrom the second position and now includes Common Weakness \nEnumerations (CWEs) related to identification\nfailures. Notable CWEs included areCWE-297: Improper Validation of\nCertificate with Host Mismatch,CWE-287: Improper Authentication, andCWE-384: Session Fixation.\n\nConfirmation of the user's identity, authentication, and session\nmanagement is critical to protect against authentication-related\nattacks. There may be authentication weaknesses if the application:\n\nPermits automated attacks such as credential stuffing, where the\n attacker has a list of valid usernames and passwords.\n\nPermits brute force or other automated attacks.\n\nPermits default, weak, or well-known passwords, such as \"Password1\"\n or \"admin/admin\".\n\nUses weak or ineffective credential recovery and forgot-password\n processes, such as \"knowledge-based answers,\" which cannot be made\n safe.\n\nUses plain text, encrypted, or weakly hashed passwords data stores (seeA02:2021-Cryptographic Failures).\n\nHas missing or ineffective multi-factor authentication.\n\nExposes session identifier in the URL.\n\nReuse session identifier after successful login.\n\nDoes not correctly invalidate Session IDs. User sessions or\n authentication tokens (mainly single sign-on (SSO) tokens) aren't\n properly invalidated during logout or a period of inactivity.\n\nWhere possible, implement multi-factor authentication to prevent\n automated credential stuffing, brute force, and stolen credential\n reuse attacks.\n\nDo not ship or deploy with any default credentials, particularly for\n admin users.\n\nImplement weak password checks, such as testing new or changed\n passwords against the top 10,000 worst passwords list.\n\nAlign password length, complexity, and rotation policies with\n National Institute of Standards and Technology (NIST)\n 800-63b's guidelines in section 5.1.1 for Memorized Secrets or other\n modern, evidence-based password policies.\n\nEnsure registration, credential recovery, and API pathways are\n hardened against account enumeration attacks by using the same\n messages for all outcomes.\n\nLimit or increasingly delay failed login attempts, but be careful not to create a denial of service scenario. Log all failures\n and alert administrators when credential stuffing, brute force, or\n other attacks are detected.\n\nUse a server-side, secure, built-in session manager that generates a\n new random session ID with high entropy after login. Session identifier\n should not be in the URL, be securely stored, and invalidated after\n logout, idle, and absolute timeouts.\n\nScenario #1:Credential stuffing, the use of lists of known\npasswords, is a common attack. Suppose an application does not implement\nautomated threat or credential stuffing protection. In that case, the\napplication can be used as a password oracle to determine if the\ncredentials are valid.\n\nScenario #2:Most authentication attacks occur due to the continued\nuse of passwords as a sole factor. Once considered best practices,\npassword rotation and complexity requirements encourage users to use\nand reuse weak passwords. Organizations are recommended to stop these\npractices per NIST 800-63 and use multi-factor authentication.\n\nScenario #3:Application session timeouts aren't set correctly. A\nuser uses a public computer to access an application. Instead of\nselecting \"logout,\" the user simply closes the browser tab and walks\naway. An attacker uses the same browser an hour later, and the user is\nstill authenticated.\n\nOWASP Proactive Controls: Implement Digital Identity\n\nOWASP Application Security Verification Standard: V2 authentication\n\nOWASP Application Security Verification Standard: V3 Session Management\n\nOWASP Testing Guide: Identity,Authentication\n\nOWASP Cheat Sheet: Authentication\n\nOWASP Cheat Sheet: Credential Stuffing\n\nOWASP Cheat Sheet: Forgot Password\n\nOWASP Cheat Sheet: Session Management\n\nOWASP Automated Threats Handbook\n\nNIST 800-63b: 5.1.1 Memorized Secrets\n\nCWE-255 Credentials Management Errors\n\nCWE-259 Use of Hard-coded Password\n\nCWE-287 Improper Authentication\n\nCWE-288 Authentication Bypass Using an Alternate Path or Channel\n\nCWE-290 Authentication Bypass by Spoofing\n\nCWE-294 Authentication Bypass by Capture-replay\n\nCWE-295 Improper Certificate Validation\n\nCWE-297 Improper Validation of Certificate with Host Mismatch\n\nCWE-300 Channel Accessible by Non-Endpoint\n\nCWE-302 Authentication Bypass by Assumed-Immutable Data\n\nCWE-304 Missing Critical Step in Authentication\n\nCWE-306 Missing Authentication for Critical Function\n\nCWE-307 Improper Restriction of Excessive Authentication Attempts\n\nCWE-346 Origin Validation Error\n\nCWE-384 Session Fixation\n\nCWE-521 Weak Password Requirements\n\nCWE-613 Insufficient Session Expiration\n\nCWE-620 Unverified Password Change\n\nCWE-640 Weak Password Recovery Mechanism for Forgotten Password\n\nCWE-798 Use of Hard-coded Credentials\n\nCWE-940 Improper Verification of Source of a Communication Channel\n\nCWE-1216 Lockout Mechanism Errors", "url": "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/"}
{"source": "owasp", "id": "A08:2021", "title": "Software and Data Integrity Failures", "description": "OWASP Top 10:2021OWASP/Top10HomeNoticeIntroductionHow to use the OWASP Top 10 as a standardHow to start an AppSec program with the OWASP Top 10About OWASPTop 10:2021 ListTop 10:2021 ListA01 Broken Access ControlA02 Cryptographic FailuresA03 InjectionA04 Insecure DesignA05 Security MisconfigurationA06 Vulnerable and Outdated ComponentsA07 Identification and Authentication FailuresA08 Software and Data Integrity FailuresA08 Software and Data Integrity FailuresTable of contentsFactorsOverviewDescriptionHow to PreventExample Attack ScenariosReferencesList of Mapped CWEsA09 Security Logging and Monitoring FailuresA10 Server Side Request Forgery (SSRF)Next StepsTable of contentsFactorsOverviewDescriptionHow to PreventExample Attack ScenariosReferencesList of Mapped CWEsA08:2021 – Software and Data Integrity FailuresFactorsCWEs MappedMax Incidence RateAvg Incidence RateAvg Weighted ExploitAvg Weighted ImpactMax CoverageAvg CoverageTotal OccurrencesTotal CVEs1016.67%2.05%6.947.9475.04%45.35%47,9721,152OverviewA new category for 2021 focuses on making assumptions related to\nsoftware updates, critical data, and CI/CD pipelines without verifying\nintegrity. One of the highest weighted impacts from \nCommon Vulnerability and Exposures/Common Vulnerability Scoring System (CVE/CVSS) \ndata. Notable Common Weakness Enumerations (CWEs) includeCWE-829: Inclusion of Functionality from Untrusted Control Sphere,CWE-494: Download of Code Without Integrity Check, andCWE-502: Deserialization of Untrusted Data.DescriptionSoftware and data integrity failures relate to code and infrastructure\nthat does not protect against integrity violations. An example of this is where an application relies upon plugins, libraries, or modules from untrusted sources, repositories, and content\ndelivery networks (CDNs). An insecure CI/CD pipeline can introduce the\npotential for unauthorized access, malicious code, or system compromise.\nLastly, many applications now include auto-update functionality, where\nupdates are downloaded without sufficient integrity verification and\napplied to the previously trusted application. Attackers could\npotentially upload their own updates to be distributed and run on all\ninstallations. Another example is where\nobjects or data are encoded or serialized into a structure that an\nattacker can see and modify is vulnerable to insecure deserialization.How to PreventUse digital signatures or similar mechanisms to verify the software or data is from the expected source and has not been altered.Ensure libraries and dependencies, such as npm or Maven, are\n consuming trusted repositories. If you have a higher risk profile, consider hosting an internal known-good repository that's vetted.Ensure that a software supply chain security tool, such as OWASP\n Dependency Check or OWASP CycloneDX, is used to verify that\n components do not contain known vulnerabilitiesEnsure that there is a review process for code and configuration changes to minimize the chance that malicious code or configuration could be introduced into your software pipeline.Ensure that your CI/CD pipeline has proper segregation, configuration, and access\n control to ensure the integrity of the code flowing through the\n build and deploy processes.Ensure that unsigned or unencrypted serialized data is not sent to\n untrusted clients without some form of integrity check or digital\n signature to detect tampering or replay of the serialized dataExample Attack ScenariosScenario #1 Update without signing:Many home routers, set-top\nboxes, device firmware, and others do not verify updates via signed\nfirmware. Unsigned firmware is a growing target for attackers and is\nexpected to only get worse. This is a major concern as many times there\nis no mechanism to remediate other than to fix in a future version and\nwait for previous versions to age out.Scenario #2 SolarWinds malicious update: Nation-states have been\nknown to attack update mechanisms, with a recent notable attack being\nthe SolarWinds Orion attack. The company that develops the software had\nsecure build and update integrity processes. Still, these were able to\nbe subverted, and for several months, the firm distributed a highly\ntargeted malicious update to more than 18,000 organizations, of which\naround 100 or so were affected. This is one of the most far-reaching and\nmost significant breaches of this nature in history.Scenario #3 Insecure Deserialization:A React application calls a\nset of Spring Boot microservices. Being functional programmers, they\ntried to ensure that their code is immutable. The solution they came up\nwith is serializing the user state and passing it back and forth with\neach request. An attacker notices the \"rO0\" Java object signature (in base64) and\nuses the Java Serial Killer tool to gain remote code execution on the\napplication server.References[OWASP Cheat Sheet: Software Supply Chain Security](Coming Soon)[OWASP Cheat Sheet: Secure build and deployment](Coming Soon)OWASP Cheat Sheet: Infrastructure as CodeOWASP Cheat Sheet: DeserializationSAFECode Software Integrity ControlsA 'Worst Nightmare' Cyberattack: The Untold Story Of The\n SolarWinds\n HackCodeCov Bash Uploader CompromiseSecuring DevOps by Julien VehentList of Mapped CWEsCWE-345 Insufficient Verification of Data AuthenticityCWE-353 Missing Support for Integrity CheckCWE-426 Untrusted Search PathCWE-494 Download of Code Without Integrity CheckCWE-502 Deserialization of Untrusted DataCWE-565 Reliance on Cookies without Validation and Integrity CheckingCWE-784 Reliance on Cookies without Validation and Integrity Checking in a Security DecisionCWE-829 Inclusion of Functionality from Untrusted Control SphereCWE-830 Inclusion of Web Functionality from an Untrusted SourceCWE-915 Improperly Controlled Modification of Dynamically-Determined Object Attributes\n\nOWASP Top 10:2021OWASP/Top10HomeNoticeIntroductionHow to use the OWASP Top 10 as a standardHow to start an AppSec program with the OWASP Top 10About OWASPTop 10:2021 ListTop 10:2021 ListA01 Broken Access ControlA02 Cryptographic FailuresA03 InjectionA04 Insecure DesignA05 Security MisconfigurationA06 Vulnerable and Outdated ComponentsA07 Identification and Authentication FailuresA08 Software and Data Integrity FailuresA08 Software and Data Integrity FailuresTable of contentsFactorsOverviewDescriptionHow to PreventExample Attack ScenariosReferencesList of Mapped CWEsA09 Security Logging and Monitoring FailuresA10 Server Side Request Forgery (SSRF)Next Steps\n\nTable of contentsFactorsOverviewDescriptionHow to PreventExample Attack ScenariosReferencesList of Mapped CWEs\n\nA08:2021 – Software and Data Integrity FailuresFactorsCWEs MappedMax Incidence RateAvg Incidence RateAvg Weighted ExploitAvg Weighted ImpactMax CoverageAvg CoverageTotal OccurrencesTotal CVEs1016.67%2.05%6.947.9475.04%45.35%47,9721,152OverviewA new category for 2021 focuses on making assumptions related to\nsoftware updates, critical data, and CI/CD pipelines without verifying\nintegrity. One of the highest weighted impacts from \nCommon Vulnerability and Exposures/Common Vulnerability Scoring System (CVE/CVSS) \ndata. Notable Common Weakness Enumerations (CWEs) includeCWE-829: Inclusion of Functionality from Untrusted Control Sphere,CWE-494: Download of Code Without Integrity Check, andCWE-502: Deserialization of Untrusted Data.DescriptionSoftware and data integrity failures relate to code and infrastructure\nthat does not protect against integrity violations. An example of this is where an application relies upon plugins, libraries, or modules from untrusted sources, repositories, and content\ndelivery networks (CDNs). An insecure CI/CD pipeline can introduce the\npotential for unauthorized access, malicious code, or system compromise.\nLastly, many applications now include auto-update functionality, where\nupdates are downloaded without sufficient integrity verification and\napplied to the previously trusted application. Attackers could\npotentially upload their own updates to be distributed and run on all\ninstallations. Another example is where\nobjects or data are encoded or serialized into a structure that an\nattacker can see and modify is vulnerable to insecure deserialization.How to PreventUse digital signatures or similar mechanisms to verify the software or data is from the expected source and has not been altered.Ensure libraries and dependencies, such as npm or Maven, are\n consuming trusted repositories. If you have a higher risk profile, consider hosting an internal known-good repository that's vetted.Ensure that a software supply chain security tool, such as OWASP\n Dependency Check or OWASP CycloneDX, is used to verify that\n components do not contain known vulnerabilitiesEnsure that there is a review process for code and configuration changes to minimize the chance that malicious code or configuration could be introduced into your software pipeline.Ensure that your CI/CD pipeline has proper segregation, configuration, and access\n control to ensure the integrity of the code flowing through the\n build and deploy processes.Ensure that unsigned or unencrypted serialized data is not sent to\n untrusted clients without some form of integrity check or digital\n signature to detect tampering or replay of the serialized dataExample Attack ScenariosScenario #1 Update without signing:Many home routers, set-top\nboxes, device firmware, and others do not verify updates via signed\nfirmware. Unsigned firmware is a growing target for attackers and is\nexpected to only get worse. This is a major concern as many times there\nis no mechanism to remediate other than to fix in a future version and\nwait for previous versions to age out.Scenario #2 SolarWinds malicious update: Nation-states have been\nknown to attack update mechanisms, with a recent notable attack being\nthe SolarWinds Orion attack. The company that develops the software had\nsecure build and update integrity processes. Still, these were able to\nbe subverted, and for several months, the firm distributed a highly\ntargeted malicious update to more than 18,000 organizations, of which\naround 100 or so were affected. This is one of the most far-reaching and\nmost significant breaches of this nature in history.Scenario #3 Insecure Deserialization:A React application calls a\nset of Spring Boot microservices. Being functional programmers, they\ntried to ensure that their code is immutable. The solution they came up\nwith is serializing the user state and passing it back and forth with\neach request. An attacker notices the \"rO0\" Java object signature (in base64) and\nuses the Java Serial Killer tool to gain remote code execution on the\napplication server.References[OWASP Cheat Sheet: Software Supply Chain Security](Coming Soon)[OWASP Cheat Sheet: Secure build and deployment](Coming Soon)OWASP Cheat Sheet: Infrastructure as CodeOWASP Cheat Sheet: DeserializationSAFECode Software Integrity ControlsA 'Worst Nightmare' Cyberattack: The Untold Story Of The\n SolarWinds\n HackCodeCov Bash Uploader CompromiseSecuring DevOps by Julien VehentList of Mapped CWEsCWE-345 Insufficient Verification of Data AuthenticityCWE-353 Missing Support for Integrity CheckCWE-426 Untrusted Search PathCWE-494 Download of Code Without Integrity CheckCWE-502 Deserialization of Untrusted DataCWE-565 Reliance on Cookies without Validation and Integrity CheckingCWE-784 Reliance on Cookies without Validation and Integrity Checking in a Security DecisionCWE-829 Inclusion of Functionality from Untrusted Control SphereCWE-830 Inclusion of Web Functionality from an Untrusted SourceCWE-915 Improperly Controlled Modification of Dynamically-Determined Object Attributes\n\nA new category for 2021 focuses on making assumptions related to\nsoftware updates, critical data, and CI/CD pipelines without verifying\nintegrity. One of the highest weighted impacts from \nCommon Vulnerability and Exposures/Common Vulnerability Scoring System (CVE/CVSS) \ndata. Notable Common Weakness Enumerations (CWEs) includeCWE-829: Inclusion of Functionality from Untrusted Control Sphere,CWE-494: Download of Code Without Integrity Check, andCWE-502: Deserialization of Untrusted Data.\n\nSoftware and data integrity failures relate to code and infrastructure\nthat does not protect against integrity violations. An example of this is where an application relies upon plugins, libraries, or modules from untrusted sources, repositories, and content\ndelivery networks (CDNs). An insecure CI/CD pipeline can introduce the\npotential for unauthorized access, malicious code, or system compromise.\nLastly, many applications now include auto-update functionality, where\nupdates are downloaded without sufficient integrity verification and\napplied to the previously trusted application. Attackers could\npotentially upload their own updates to be distributed and run on all\ninstallations. Another example is where\nobjects or data are encoded or serialized into a structure that an\nattacker can see and modify is vulnerable to insecure deserialization.\n\nUse digital signatures or similar mechanisms to verify the software or data is from the expected source and has not been altered.\n\nEnsure libraries and dependencies, such as npm or Maven, are\n consuming trusted repositories. If you have a higher risk profile, consider hosting an internal known-good repository that's vetted.\n\nEnsure that a software supply chain security tool, such as OWASP\n Dependency Check or OWASP CycloneDX, is used to verify that\n components do not contain known vulnerabilities\n\nEnsure that there is a review process for code and configuration changes to minimize the chance that malicious code or configuration could be introduced into your software pipeline.\n\nEnsure that your CI/CD pipeline has proper segregation, configuration, and access\n control to ensure the integrity of the code flowing through the\n build and deploy processes.\n\nEnsure that unsigned or unencrypted serialized data is not sent to\n untrusted clients without some form of integrity check or digital\n signature to detect tampering or replay of the serialized data\n\nScenario #1 Update without signing:Many home routers, set-top\nboxes, device firmware, and others do not verify updates via signed\nfirmware. Unsigned firmware is a growing target for attackers and is\nexpected to only get worse. This is a major concern as many times there\nis no mechanism to remediate other than to fix in a future version and\nwait for previous versions to age out.\n\nScenario #2 SolarWinds malicious update: Nation-states have been\nknown to attack update mechanisms, with a recent notable attack being\nthe SolarWinds Orion attack. The company that develops the software had\nsecure build and update integrity processes. Still, these were able to\nbe subverted, and for several months, the firm distributed a highly\ntargeted malicious update to more than 18,000 organizations, of which\naround 100 or so were affected. This is one of the most far-reaching and\nmost significant breaches of this nature in history.\n\nScenario #3 Insecure Deserialization:A React application calls a\nset of Spring Boot microservices. Being functional programmers, they\ntried to ensure that their code is immutable. The solution they came up\nwith is serializing the user state and passing it back and forth with\neach request. An attacker notices the \"rO0\" Java object signature (in base64) and\nuses the Java Serial Killer tool to gain remote code execution on the\napplication server.\n\n[OWASP Cheat Sheet: Software Supply Chain Security](Coming Soon)\n\n[OWASP Cheat Sheet: Secure build and deployment](Coming Soon)\n\nOWASP Cheat Sheet: Infrastructure as Code\n\nOWASP Cheat Sheet: Deserialization\n\nSAFECode Software Integrity Controls\n\nA 'Worst Nightmare' Cyberattack: The Untold Story Of The\n SolarWinds\n Hack\n\nCodeCov Bash Uploader Compromise\n\nSecuring DevOps by Julien Vehent\n\nCWE-345 Insufficient Verification of Data Authenticity\n\nCWE-353 Missing Support for Integrity Check\n\nCWE-426 Untrusted Search Path\n\nCWE-494 Download of Code Without Integrity Check\n\nCWE-502 Deserialization of Untrusted Data\n\nCWE-565 Reliance on Cookies without Validation and Integrity Checking\n\nCWE-784 Reliance on Cookies without Validation and Integrity Checking in a Security Decision\n\nCWE-829 Inclusion of Functionality from Untrusted Control Sphere\n\nCWE-830 Inclusion of Web Functionality from an Untrusted Source\n\nCWE-915 Improperly Controlled Modification of Dynamically-Determined Object Attributes", "url": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/"}
{"source": "owasp", "id": "A09:2021", "title": "Security Logging and Monitoring Failures", "description": "OWASP Top 10:2021OWASP/Top10HomeNoticeIntroductionHow to use the OWASP Top 10 as a standardHow to start an AppSec program with the OWASP Top 10About OWASPTop 10:2021 ListTop 10:2021 ListA01 Broken Access ControlA02 Cryptographic FailuresA03 InjectionA04 Insecure DesignA05 Security MisconfigurationA06 Vulnerable and Outdated ComponentsA07 Identification and Authentication FailuresA08 Software and Data Integrity FailuresA09 Security Logging and Monitoring FailuresA09 Security Logging and Monitoring FailuresTable of contentsFactorsOverviewDescriptionHow to PreventExample Attack ScenariosReferencesList of Mapped CWEsA10 Server Side Request Forgery (SSRF)Next StepsTable of contentsFactorsOverviewDescriptionHow to PreventExample Attack ScenariosReferencesList of Mapped CWEsA09:2021 – Security Logging and Monitoring FailuresFactorsCWEs MappedMax Incidence RateAvg Incidence RateAvg Weighted ExploitAvg Weighted ImpactMax CoverageAvg CoverageTotal OccurrencesTotal CVEs419.23%6.51%6.874.9953.67%39.97%53,615242OverviewSecurity logging and monitoring came from the Top 10 community survey (#3), up\nslightly from the tenth position in the OWASP Top 10 2017. Logging and\nmonitoring can be challenging to test, often involving interviews or\nasking if attacks were detected during a penetration test. There isn't\nmuch CVE/CVSS data for this category, but detecting and responding to\nbreaches is critical. Still, it can be very impactful for accountability, visibility,\nincident alerting, and forensics. This category expands beyondCWE-778\nInsufficient Loggingto includeCWE-117 Improper Output Neutralization\nfor Logs,CWE-223 Omission of Security-relevant Information, andCWE-532Insertion of Sensitive Information into Log File.DescriptionReturning to the OWASP Top 10 2021, this category is to help detect,\nescalate, and respond to active breaches. Without logging and\nmonitoring, breaches cannot be detected. Insufficient logging,\ndetection, monitoring, and active response occurs any time:Auditable events, such as logins, failed logins, and high-value\n transactions, are not logged.Warnings and errors generate no, inadequate, or unclear log\n messages.Logs of applications and APIs are not monitored for suspicious\n activity.Logs are only stored locally.Appropriate alerting thresholds and response escalation processes\n are not in place or effective.Penetration testing and scans by dynamic application security testing (DAST) tools (such as OWASP ZAP) do\n not trigger alerts.The application cannot detect, escalate, or alert for active attacks\n in real-time or near real-time.You are vulnerable to information leakage by making logging and alerting\nevents visible to a user or an attacker (seeA01:2021-Broken Access Control).You are vulnerable to injections or\n attacks on the logging or monitoring systems if log data is not correctly encoded.How to PreventDevelopers should implement some or all the following controls, \ndepending on the risk of the application:Ensure all login, access control, and server-side input validation\n failures can be logged with sufficient user context to identify\n suspicious or malicious accounts and held for enough time to allow\n delayed forensic analysis.Ensure that logs are generated in a format that log management\n solutions can easily consume.Ensure log data is encoded correctly to prevent injections or\n attacks on the logging or monitoring systems.Ensure high-value transactions have an audit trail with integrity\n controls to prevent tampering or deletion, such as append-only\n database tables or similar.DevSecOps teams should establish effective monitoring and alerting\n such that suspicious activities are detected and responded to\n quickly.Establish or adopt an incident response and recovery plan, such as\n National Institute of Standards and Technology (NIST) 800-61r2 or later.There are commercial and open-source application protection frameworks\nsuch as the OWASP ModSecurity Core Rule Set, and open-source log\ncorrelation software, such as the Elasticsearch, Logstash, Kibana (ELK)\nstack, that feature custom dashboards and alerting.Example Attack ScenariosScenario #1:A children's health plan provider's website operator\ncouldn't detect a breach due to a lack of monitoring and logging. An\nexternal party informed the health plan provider that an attacker had\naccessed and modified thousands of sensitive health records of more than\n3.5 million children. A post-incident review found that the website\ndevelopers had not addressed significant vulnerabilities. As there was\nno logging or monitoring of the system, the data breach could have been\nin progress since 2013, a period of more than seven years.Scenario #2:A major Indian airline had a data breach involving more\nthan ten years' worth of personal data of millions of passengers,\nincluding passport and credit card data. The data breach occurred at a\nthird-party cloud hosting provider, who notified the airline of the\nbreach after some time.Scenario #3:A major European airline suffered a GDPR reportable\nbreach. The breach was reportedly caused by payment application security\nvulnerabilities exploited by attackers, who harvested more than 400,000\ncustomer payment records. The airline was fined 20 million pounds as a\nresult by the privacy regulator.ReferencesOWASP Proactive Controls: Implement Logging and\n MonitoringOWASP Application Security Verification Standard: V7 Logging and\n MonitoringOWASP Testing Guide: Testing for Detailed Error\n CodeOWASP Cheat Sheet:\n Application Logging VocabularyOWASP Cheat Sheet:\n LoggingData Integrity: Recovering from Ransomware and Other Destructive\n EventsData Integrity: Identifying and Protecting Assets Against\n Ransomware and Other Destructive\n EventsData Integrity: Detecting and Responding to Ransomware and Other\n Destructive\n EventsList of Mapped CWEsCWE-117 Improper Output Neutralization for LogsCWE-223 Omission of Security-relevant InformationCWE-532 Insertion of Sensitive Information into Log FileCWE-778 Insufficient Logging\n\nOWASP Top 10:2021OWASP/Top10HomeNoticeIntroductionHow to use the OWASP Top 10 as a standardHow to start an AppSec program with the OWASP Top 10About OWASPTop 10:2021 ListTop 10:2021 ListA01 Broken Access ControlA02 Cryptographic FailuresA03 InjectionA04 Insecure DesignA05 Security MisconfigurationA06 Vulnerable and Outdated ComponentsA07 Identification and Authentication FailuresA08 Software and Data Integrity FailuresA09 Security Logging and Monitoring FailuresA09 Security Logging and Monitoring FailuresTable of contentsFactorsOverviewDescriptionHow to PreventExample Attack ScenariosReferencesList of Mapped CWEsA10 Server Side Request Forgery (SSRF)Next Steps\n\nTable of contentsFactorsOverviewDescriptionHow to PreventExample Attack ScenariosReferencesList of Mapped CWEs\n\nA09:2021 – Security Logging and Monitoring FailuresFactorsCWEs MappedMax Incidence RateAvg Incidence RateAvg Weighted ExploitAvg Weighted ImpactMax CoverageAvg CoverageTotal OccurrencesTotal CVEs419.23%6.51%6.874.9953.67%39.97%53,615242OverviewSecurity logging and monitoring came from the Top 10 community survey (#3), up\nslightly from the tenth position in the OWASP Top 10 2017. Logging and\nmonitoring can be challenging to test, often involving interviews or\nasking if attacks were detected during a penetration test. There isn't\nmuch CVE/CVSS data for this category, but detecting and responding to\nbreaches is critical. Still, it can be very impactful for accountability, visibility,\nincident alerting, and forensics. This category expands beyondCWE-778\nInsufficient Loggingto includeCWE-117 Improper Output Neutralization\nfor Logs,CWE-223 Omission of Security-relevant Information, andCWE-532Insertion of Sensitive Information into Log File.DescriptionReturning to the OWASP Top 10 2021, this category is to help detect,\nescalate, and respond to active breaches. Without logging and\nmonitoring, breaches cannot be detected. Insufficient logging,\ndetection, monitoring, and active response occurs any time:Auditable events, such as logins, failed logins, and high-value\n transactions, are not logged.Warnings and errors generate no, inadequate, or unclear log\n messages.Logs of applications and APIs are not monitored for suspicious\n activity.Logs are only stored locally.Appropriate alerting thresholds and response escalation processes\n are not in place or effective.Penetration testing and scans by dynamic application security testing (DAST) tools (such as OWASP ZAP) do\n not trigger alerts.The application cannot detect, escalate, or alert for active attacks\n in real-time or near real-time.You are vulnerable to information leakage by making logging and alerting\nevents visible to a user or an attacker (seeA01:2021-Broken Access Control).You are vulnerable to injections or\n attacks on the logging or monitoring systems if log data is not correctly encoded.How to PreventDevelopers should implement some or all the following controls, \ndepending on the risk of the application:Ensure all login, access control, and server-side input validation\n failures can be logged with sufficient user context to identify\n suspicious or malicious accounts and held for enough time to allow\n delayed forensic analysis.Ensure that logs are generated in a format that log management\n solutions can easily consume.Ensure log data is encoded correctly to prevent injections or\n attacks on the logging or monitoring systems.Ensure high-value transactions have an audit trail with integrity\n controls to prevent tampering or deletion, such as append-only\n database tables or similar.DevSecOps teams should establish effective monitoring and alerting\n such that suspicious activities are detected and responded to\n quickly.Establish or adopt an incident response and recovery plan, such as\n National Institute of Standards and Technology (NIST) 800-61r2 or later.There are commercial and open-source application protection frameworks\nsuch as the OWASP ModSecurity Core Rule Set, and open-source log\ncorrelation software, such as the Elasticsearch, Logstash, Kibana (ELK)\nstack, that feature custom dashboards and alerting.Example Attack ScenariosScenario #1:A children's health plan provider's website operator\ncouldn't detect a breach due to a lack of monitoring and logging. An\nexternal party informed the health plan provider that an attacker had\naccessed and modified thousands of sensitive health records of more than\n3.5 million children. A post-incident review found that the website\ndevelopers had not addressed significant vulnerabilities. As there was\nno logging or monitoring of the system, the data breach could have been\nin progress since 2013, a period of more than seven years.Scenario #2:A major Indian airline had a data breach involving more\nthan ten years' worth of personal data of millions of passengers,\nincluding passport and credit card data. The data breach occurred at a\nthird-party cloud hosting provider, who notified the airline of the\nbreach after some time.Scenario #3:A major European airline suffered a GDPR reportable\nbreach. The breach was reportedly caused by payment application security\nvulnerabilities exploited by attackers, who harvested more than 400,000\ncustomer payment records. The airline was fined 20 million pounds as a\nresult by the privacy regulator.ReferencesOWASP Proactive Controls: Implement Logging and\n MonitoringOWASP Application Security Verification Standard: V7 Logging and\n MonitoringOWASP Testing Guide: Testing for Detailed Error\n CodeOWASP Cheat Sheet:\n Application Logging VocabularyOWASP Cheat Sheet:\n LoggingData Integrity: Recovering from Ransomware and Other Destructive\n EventsData Integrity: Identifying and Protecting Assets Against\n Ransomware and Other Destructive\n EventsData Integrity: Detecting and Responding to Ransomware and Other\n Destructive\n EventsList of Mapped CWEsCWE-117 Improper Output Neutralization for LogsCWE-223 Omission of Security-relevant InformationCWE-532 Insertion of Sensitive Information into Log FileCWE-778 Insufficient Logging\n\nSecurity logging and monitoring came from the Top 10 community survey (#3), up\nslightly from the tenth position in the OWASP Top 10 2017. Logging and\nmonitoring can be challenging to test, often involving interviews or\nasking if attacks were detected during a penetration test. There isn't\nmuch CVE/CVSS data for this category, but detecting and responding to\nbreaches is critical. Still, it can be very impactful for accountability, visibility,\nincident alerting, and forensics. This category expands beyondCWE-778\nInsufficient Loggingto includeCWE-117 Improper Output Neutralization\nfor Logs,CWE-223 Omission of Security-relevant Information, andCWE-532Insertion of Sensitive Information into Log File.\n\nReturning to the OWASP Top 10 2021, this category is to help detect,\nescalate, and respond to active breaches. Without logging and\nmonitoring, breaches cannot be detected. Insufficient logging,\ndetection, monitoring, and active response occurs any time:\n\nAuditable events, such as logins, failed logins, and high-value\n transactions, are not logged.\n\nWarnings and errors generate no, inadequate, or unclear log\n messages.\n\nLogs of applications and APIs are not monitored for suspicious\n activity.\n\nLogs are only stored locally.\n\nAppropriate alerting thresholds and response escalation processes\n are not in place or effective.\n\nPenetration testing and scans by dynamic application security testing (DAST) tools (such as OWASP ZAP) do\n not trigger alerts.\n\nThe application cannot detect, escalate, or alert for active attacks\n in real-time or near real-time.\n\nYou are vulnerable to information leakage by making logging and alerting\nevents visible to a user or an attacker (seeA01:2021-Broken Access Control).\n\nYou are vulnerable to injections or\n attacks on the logging or monitoring systems if log data is not correctly encoded.\n\nDevelopers should implement some or all the following controls, \ndepending on the risk of the application:\n\nEnsure all login, access control, and server-side input validation\n failures can be logged with sufficient user context to identify\n suspicious or malicious accounts and held for enough time to allow\n delayed forensic analysis.\n\nEnsure that logs are generated in a format that log management\n solutions can easily consume.\n\nEnsure log data is encoded correctly to prevent injections or\n attacks on the logging or monitoring systems.\n\nEnsure high-value transactions have an audit trail with integrity\n controls to prevent tampering or deletion, such as append-only\n database tables or similar.\n\nDevSecOps teams should establish effective monitoring and alerting\n such that suspicious activities are detected and responded to\n quickly.\n\nEstablish or adopt an incident response and recovery plan, such as\n National Institute of Standards and Technology (NIST) 800-61r2 or later.\n\nThere are commercial and open-source application protection frameworks\nsuch as the OWASP ModSecurity Core Rule Set, and open-source log\ncorrelation software, such as the Elasticsearch, Logstash, Kibana (ELK)\nstack, that feature custom dashboards and alerting.\n\nScenario #1:A children's health plan provider's website operator\ncouldn't detect a breach due to a lack of monitoring and logging. An\nexternal party informed the health plan provider that an attacker had\naccessed and modified thousands of sensitive health records of more than\n3.5 million children. A post-incident review found that the website\ndevelopers had not addressed significant vulnerabilities. As there was\nno logging or monitoring of the system, the data breach could have been\nin progress since 2013, a period of more than seven years.\n\nScenario #2:A major Indian airline had a data breach involving more\nthan ten years' worth of personal data of millions of passengers,\nincluding passport and credit card data. The data breach occurred at a\nthird-party cloud hosting provider, who notified the airline of the\nbreach after some time.\n\nScenario #3:A major European airline suffered a GDPR reportable\nbreach. The breach was reportedly caused by payment application security\nvulnerabilities exploited by attackers, who harvested more than 400,000\ncustomer payment records. The airline was fined 20 million pounds as a\nresult by the privacy regulator.\n\nOWASP Proactive Controls: Implement Logging and\n Monitoring\n\nOWASP Application Security Verification Standard: V7 Logging and\n Monitoring\n\nOWASP Testing Guide: Testing for Detailed Error\n Code\n\nOWASP Cheat Sheet:\n Application Logging Vocabulary\n\nOWASP Cheat Sheet:\n Logging\n\nData Integrity: Recovering from Ransomware and Other Destructive\n Events\n\nData Integrity: Identifying and Protecting Assets Against\n Ransomware and Other Destructive\n Events\n\nData Integrity: Detecting and Responding to Ransomware and Other\n Destructive\n Events\n\nCWE-117 Improper Output Neutralization for Logs\n\nCWE-223 Omission of Security-relevant Information\n\nCWE-532 Insertion of Sensitive Information into Log File\n\nCWE-778 Insufficient Logging", "url": "https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/"}
{"source": "owasp", "id": "A10:2021", "title": "Server Side Request Forgery (SSRF)", "description": "OWASP Top 10:2021OWASP/Top10HomeNoticeIntroductionHow to use the OWASP Top 10 as a standardHow to start an AppSec program with the OWASP Top 10About OWASPTop 10:2021 ListTop 10:2021 ListA01 Broken Access ControlA02 Cryptographic FailuresA03 InjectionA04 Insecure DesignA05 Security MisconfigurationA06 Vulnerable and Outdated ComponentsA07 Identification and Authentication FailuresA08 Software and Data Integrity FailuresA09 Security Logging and Monitoring FailuresA10 Server Side Request Forgery (SSRF)A10 Server Side Request Forgery (SSRF)Table of contentsFactorsOverviewDescriptionHow to PreventFrom Network layerFrom Application layer:Additional Measures to consider:Example Attack ScenariosReferencesList of Mapped CWEsNext StepsTable of contentsFactorsOverviewDescriptionHow to PreventFrom Network layerFrom Application layer:Additional Measures to consider:Example Attack ScenariosReferencesList of Mapped CWEsA10:2021 – Server-Side Request Forgery (SSRF)FactorsCWEs MappedMax Incidence RateAvg Incidence RateAvg Weighted ExploitAvg Weighted ImpactMax CoverageAvg CoverageTotal OccurrencesTotal CVEs12.72%2.72%8.286.7267.72%67.72%9,503385OverviewThis category is added from the Top 10 community survey (#1). The data shows a\nrelatively low incidence rate with above average testing coverage and\nabove-average Exploit and Impact potential ratings. As new entries are\nlikely to be a single or small cluster of Common Weakness Enumerations (CWEs)\nfor attention and\nawareness, the hope is that they are subject to focus and can be rolled\ninto a larger category in a future edition.DescriptionSSRF flaws occur whenever a web application is fetching a remote\nresource without validating the user-supplied URL. It allows an attacker\nto coerce the application to send a crafted request to an unexpected\ndestination, even when protected by a firewall, VPN, or another type of\nnetwork access control list (ACL).As modern web applications provide end-users with convenient features,\nfetching a URL becomes a common scenario. As a result, the incidence of\nSSRF is increasing. Also, the severity of SSRF is becoming higher due to\ncloud services and the complexity of architectures.How to PreventDevelopers can prevent SSRF by implementing some or all the following\ndefense in depth controls:From Network layerSegment remote resource access functionality in separate networks to\n reduce the impact of SSRFEnforce “deny by default” firewall policies or network access\n control rules to block all but essential intranet traffic.Hints:~ Establish an ownership and a lifecycle for firewall rules based on applications.~ Log all acceptedandblocked network flows on firewalls\n (seeA09:2021-Security Logging and Monitoring Failures).From Application layer:Sanitize and validate all client-supplied input dataEnforce the URL schema, port, and destination with a positive allow\n listDo not send raw responses to clientsDisable HTTP redirectionsBe aware of the URL consistency to avoid attacks such as DNS\n rebinding and “time of check, time of use” (TOCTOU) race conditionsDo not mitigate SSRF via the use of a deny list or regular expression.\nAttackers have payload lists, tools, and skills to bypass deny lists.Additional Measures to consider:Don't deploy other security relevant services on front systems (e.g. OpenID). \n Control local traffic on these systems (e.g. localhost)For frontends with dedicated and manageable user groups use network encryption (e.g. VPNs)\n on independent systems to consider very high protection needsExample Attack ScenariosAttackers can use SSRF to attack systems protected behind web\napplication firewalls, firewalls, or network ACLs, using scenarios such\nas:Scenario #1:Port scan internal servers – If the network architecture\nis unsegmented, attackers can map out internal networks and determine if\nports are open or closed on internal servers from connection results or\nelapsed time to connect or reject SSRF payload connections.Scenario #2:Sensitive data exposure – Attackers can access local \nfiles or internal services to gain sensitive information such\nasfile:///etc/passwdandhttp://localhost:28017/.Scenario #3:Access metadata storage of cloud services – Most cloud\nproviders have metadata storage such ashttp://169.254.169.254/. An\nattacker can read the metadata to gain sensitive information.Scenario #4:Compromise internal services – The attacker can abuse\ninternal services to conduct further attacks such as Remote Code\nExecution (RCE) or Denial of Service (DoS).ReferencesOWASP - Server-Side Request Forgery Prevention Cheat\n SheetPortSwigger - Server-side request forgery\n (SSRF)Acunetix - What is Server-Side Request Forgery\n (SSRF)?SSRF\n bibleA New Era of SSRF - Exploiting URL Parser in Trending Programming\n Languages!List of Mapped CWEsCWE-918 Server-Side Request Forgery (SSRF)\n\nOWASP Top 10:2021OWASP/Top10HomeNoticeIntroductionHow to use the OWASP Top 10 as a standardHow to start an AppSec program with the OWASP Top 10About OWASPTop 10:2021 ListTop 10:2021 ListA01 Broken Access ControlA02 Cryptographic FailuresA03 InjectionA04 Insecure DesignA05 Security MisconfigurationA06 Vulnerable and Outdated ComponentsA07 Identification and Authentication FailuresA08 Software and Data Integrity FailuresA09 Security Logging and Monitoring FailuresA10 Server Side Request Forgery (SSRF)A10 Server Side Request Forgery (SSRF)Table of contentsFactorsOverviewDescriptionHow to PreventFrom Network layerFrom Application layer:Additional Measures to consider:Example Attack ScenariosReferencesList of Mapped CWEsNext Steps\n\nTable of contentsFactorsOverviewDescriptionHow to PreventFrom Network layerFrom Application layer:Additional Measures to consider:Example Attack ScenariosReferencesList of Mapped CWEs\n\nA10:2021 – Server-Side Request Forgery (SSRF)FactorsCWEs MappedMax Incidence RateAvg Incidence RateAvg Weighted ExploitAvg Weighted ImpactMax CoverageAvg CoverageTotal OccurrencesTotal CVEs12.72%2.72%8.286.7267.72%67.72%9,503385OverviewThis category is added from the Top 10 community survey (#1). The data shows a\nrelatively low incidence rate with above average testing coverage and\nabove-average Exploit and Impact potential ratings. As new entries are\nlikely to be a single or small cluster of Common Weakness Enumerations (CWEs)\nfor attention and\nawareness, the hope is that they are subject to focus and can be rolled\ninto a larger category in a future edition.DescriptionSSRF flaws occur whenever a web application is fetching a remote\nresource without validating the user-supplied URL. It allows an attacker\nto coerce the application to send a crafted request to an unexpected\ndestination, even when protected by a firewall, VPN, or another type of\nnetwork access control list (ACL).As modern web applications provide end-users with convenient features,\nfetching a URL becomes a common scenario. As a result, the incidence of\nSSRF is increasing. Also, the severity of SSRF is becoming higher due to\ncloud services and the complexity of architectures.How to PreventDevelopers can prevent SSRF by implementing some or all the following\ndefense in depth controls:From Network layerSegment remote resource access functionality in separate networks to\n reduce the impact of SSRFEnforce “deny by default” firewall policies or network access\n control rules to block all but essential intranet traffic.Hints:~ Establish an ownership and a lifecycle for firewall rules based on applications.~ Log all acceptedandblocked network flows on firewalls\n (seeA09:2021-Security Logging and Monitoring Failures).From Application layer:Sanitize and validate all client-supplied input dataEnforce the URL schema, port, and destination with a positive allow\n listDo not send raw responses to clientsDisable HTTP redirectionsBe aware of the URL consistency to avoid attacks such as DNS\n rebinding and “time of check, time of use” (TOCTOU) race conditionsDo not mitigate SSRF via the use of a deny list or regular expression.\nAttackers have payload lists, tools, and skills to bypass deny lists.Additional Measures to consider:Don't deploy other security relevant services on front systems (e.g. OpenID). \n Control local traffic on these systems (e.g. localhost)For frontends with dedicated and manageable user groups use network encryption (e.g. VPNs)\n on independent systems to consider very high protection needsExample Attack ScenariosAttackers can use SSRF to attack systems protected behind web\napplication firewalls, firewalls, or network ACLs, using scenarios such\nas:Scenario #1:Port scan internal servers – If the network architecture\nis unsegmented, attackers can map out internal networks and determine if\nports are open or closed on internal servers from connection results or\nelapsed time to connect or reject SSRF payload connections.Scenario #2:Sensitive data exposure – Attackers can access local \nfiles or internal services to gain sensitive information such\nasfile:///etc/passwdandhttp://localhost:28017/.Scenario #3:Access metadata storage of cloud services – Most cloud\nproviders have metadata storage such ashttp://169.254.169.254/. An\nattacker can read the metadata to gain sensitive information.Scenario #4:Compromise internal services – The attacker can abuse\ninternal services to conduct further attacks such as Remote Code\nExecution (RCE) or Denial of Service (DoS).ReferencesOWASP - Server-Side Request Forgery Prevention Cheat\n SheetPortSwigger - Server-side request forgery\n (SSRF)Acunetix - What is Server-Side Request Forgery\n (SSRF)?SSRF\n bibleA New Era of SSRF - Exploiting URL Parser in Trending Programming\n Languages!List of Mapped CWEsCWE-918 Server-Side Request Forgery (SSRF)\n\nThis category is added from the Top 10 community survey (#1). The data shows a\nrelatively low incidence rate with above average testing coverage and\nabove-average Exploit and Impact potential ratings. As new entries are\nlikely to be a single or small cluster of Common Weakness Enumerations (CWEs)\nfor attention and\nawareness, the hope is that they are subject to focus and can be rolled\ninto a larger category in a future edition.\n\nSSRF flaws occur whenever a web application is fetching a remote\nresource without validating the user-supplied URL. It allows an attacker\nto coerce the application to send a crafted request to an unexpected\ndestination, even when protected by a firewall, VPN, or another type of\nnetwork access control list (ACL).\n\nAs modern web applications provide end-users with convenient features,\nfetching a URL becomes a common scenario. As a result, the incidence of\nSSRF is increasing. Also, the severity of SSRF is becoming higher due to\ncloud services and the complexity of architectures.\n\nDevelopers can prevent SSRF by implementing some or all the following\ndefense in depth controls:\n\nSegment remote resource access functionality in separate networks to\n reduce the impact of SSRF\n\nEnforce “deny by default” firewall policies or network access\n control rules to block all but essential intranet traffic.Hints:~ Establish an ownership and a lifecycle for firewall rules based on applications.~ Log all acceptedandblocked network flows on firewalls\n (seeA09:2021-Security Logging and Monitoring Failures).\n\nSanitize and validate all client-supplied input data\n\nEnforce the URL schema, port, and destination with a positive allow\n list\n\nDo not send raw responses to clients\n\nDisable HTTP redirections\n\nBe aware of the URL consistency to avoid attacks such as DNS\n rebinding and “time of check, time of use” (TOCTOU) race conditions\n\nDo not mitigate SSRF via the use of a deny list or regular expression.\nAttackers have payload lists, tools, and skills to bypass deny lists.\n\nDon't deploy other security relevant services on front systems (e.g. OpenID). \n Control local traffic on these systems (e.g. localhost)\n\nFor frontends with dedicated and manageable user groups use network encryption (e.g. VPNs)\n on independent systems to consider very high protection needs\n\nAttackers can use SSRF to attack systems protected behind web\napplication firewalls, firewalls, or network ACLs, using scenarios such\nas:\n\nScenario #1:Port scan internal servers – If the network architecture\nis unsegmented, attackers can map out internal networks and determine if\nports are open or closed on internal servers from connection results or\nelapsed time to connect or reject SSRF payload connections.\n\nScenario #2:Sensitive data exposure – Attackers can access local \nfiles or internal services to gain sensitive information such\nasfile:///etc/passwdandhttp://localhost:28017/.\n\nScenario #3:Access metadata storage of cloud services – Most cloud\nproviders have metadata storage such ashttp://169.254.169.254/. An\nattacker can read the metadata to gain sensitive information.\n\nScenario #4:Compromise internal services – The attacker can abuse\ninternal services to conduct further attacks such as Remote Code\nExecution (RCE) or Denial of Service (DoS).\n\nOWASP - Server-Side Request Forgery Prevention Cheat\n Sheet\n\nPortSwigger - Server-side request forgery\n (SSRF)\n\nAcunetix - What is Server-Side Request Forgery\n (SSRF)?\n\nA New Era of SSRF - Exploiting URL Parser in Trending Programming\n Languages!\n\nCWE-918 Server-Side Request Forgery (SSRF)", "url": "https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/"}
